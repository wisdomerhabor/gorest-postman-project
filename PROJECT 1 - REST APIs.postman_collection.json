{
	"info": {
		"_postman_id": "075b704c-2c1f-4cdb-8bd8-288ddccef216",
		"name": "PROJECT 1 - REST APIs",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "30861133",
		"_collection_link": "https://wisdomeo.postman.co/workspace/b3e04790-c8ef-42e4-ace3-550d72bb38db/collection/30865648-075b704c-2c1f-4cdb-8bd8-288ddccef216?action=share&source=collection_link&creator=30861133"
	},
	"item": [
		{
			"name": "Positive Test Cases",
			"item": [
				{
					"name": "List users API",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"List Users - Verify response code is 200 OK\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"    pm.response.to.have.status(\"OK\");\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 5 seconds\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(5000);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify the response body string received from server\", function () {\r",
									"    pm.response.to.have.body(\"response_body_string\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify if the response body is received from server\", function () {\r",
									"    pm.response.to.have.body();\r",
									"});\r",
									"\r",
									"pm.test(\"Verify if the response header Content-Type=application/json\", function () {\r",
									"    pm.response.to.have.header(\"Content-Type\",\"application/json; charset=utf-8\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify if the response body contains fields such as id, name, email, gender, status\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"id\");\r",
									"    pm.expect(pm.response.text()).to.include(\"name\");\r",
									"    pm.expect(pm.response.text()).to.include(\"email\");\r",
									"    pm.expect(pm.response.text()).to.include(\"gender\");\r",
									"    pm.expect(pm.response.text()).to.include(\"status\");\r",
									"});\r",
									"pm.test(\"Response body has valid Content-Type header\", function () {\r",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "5582f007d8a190ac92d47850fc3ccb4dc14c96e0de5bf83db58270734a7952fe",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer ACCESS-TOKEN"
							}
						],
						"url": {
							"raw": "https://gorest.co.in/public/v2/users",
							"protocol": "https",
							"host": [
								"gorest",
								"co",
								"in"
							],
							"path": [
								"public",
								"v2",
								"users"
							]
						},
						"description": "### Get Users\n\nThis endpoint sends an HTTP GET request to retrieve a list of users from the server.\n\n**Request Body**  \nThis request does not require a request body.\n\n**Response**  \nThe response will include an array of user objects, where each object contains the following fields:\n\n- `id` (number): The unique identifier for the user.\n    \n- `name` (string): The name of the user.\n    \n- `email` (string): The email address of the user.\n    \n- `gender` (string): The gender of the user.\n    \n- `status` (string): The status of the user.\n    \n\nExample response:\n\n``` json\n[\n    {\n        \"id\": 0,\n        \"name\": \"\",\n        \"email\": \"\",\n        \"gender\": \"\",\n        \"status\": \"\"\n    }\n]\n\n ```"
					},
					"response": [
						{
							"name": "List users API",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer ACCESS-TOKEN"
									}
								],
								"url": {
									"raw": "https://gorest.co.in/public/v2/users",
									"protocol": "https",
									"host": [
										"gorest",
										"co",
										"in"
									],
									"path": [
										"public",
										"v2",
										"users"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Date",
									"value": "Wed, 02 Oct 2024 08:46:17 GMT"
								},
								{
									"key": "Content-Type",
									"value": "application/json; charset=utf-8"
								},
								{
									"key": "Transfer-Encoding",
									"value": "chunked"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								},
								{
									"key": "Cache-Control",
									"value": "max-age=0, private, must-revalidate"
								},
								{
									"key": "etag",
									"value": "W/\"04d4ce1780d4f5f061d94e088cb66ca5\""
								},
								{
									"key": "referrer-policy",
									"value": "strict-origin-when-cross-origin"
								},
								{
									"key": "vary",
									"value": "Origin"
								},
								{
									"key": "x-content-type-options",
									"value": "nosniff"
								},
								{
									"key": "x-download-options",
									"value": "noopen"
								},
								{
									"key": "x-frame-options",
									"value": "SAMEORIGIN"
								},
								{
									"key": "x-links-current",
									"value": "https://gorest.co.in/public/v2/users?page=1"
								},
								{
									"key": "x-links-next",
									"value": "https://gorest.co.in/public/v2/users?page=2"
								},
								{
									"key": "x-links-previous",
									"value": ""
								},
								{
									"key": "x-pagination-limit",
									"value": "10"
								},
								{
									"key": "x-pagination-page",
									"value": "1"
								},
								{
									"key": "x-pagination-pages",
									"value": "289"
								},
								{
									"key": "x-pagination-total",
									"value": "2887"
								},
								{
									"key": "x-permitted-cross-domain-policies",
									"value": "none"
								},
								{
									"key": "x-ratelimit-limit",
									"value": "90"
								},
								{
									"key": "x-ratelimit-remaining",
									"value": "89"
								},
								{
									"key": "x-ratelimit-reset",
									"value": "1"
								},
								{
									"key": "x-request-id",
									"value": "a5dfca49-563f-49a2-9e59-02a0326faea8"
								},
								{
									"key": "x-runtime",
									"value": "0.062732"
								},
								{
									"key": "x-xss-protection",
									"value": "0"
								},
								{
									"key": "CF-Cache-Status",
									"value": "DYNAMIC"
								},
								{
									"key": "Report-To",
									"value": "{\"endpoints\":[{\"url\":\"https:\\/\\/a.nel.cloudflare.com\\/report\\/v4?s=ECV%2F1Q6OgJ2HCf8KpmDWhc%2BadUB%2BjjlYiq9eVGvh833YrQc6YycSnYAV39%2BRX8UPSHVRQYhZkKo%2FpIcjyEFmDnVNRFCifJxRRiCxAtQztFJg8MnaXy7i0PifU2hXHtk%3D\"}],\"group\":\"cf-nel\",\"max_age\":604800}"
								},
								{
									"key": "NEL",
									"value": "{\"success_fraction\":0,\"report_to\":\"cf-nel\",\"max_age\":604800}"
								},
								{
									"key": "Server",
									"value": "cloudflare"
								},
								{
									"key": "CF-RAY",
									"value": "8cc36bcbbe88d3dc-CDG"
								},
								{
									"key": "Content-Encoding",
									"value": "br"
								}
							],
							"cookie": [],
							"body": "[\n    {\n        \"id\": 7441656,\n        \"name\": \"Wisdom O. Erhabor\",\n        \"email\": \"wisdomochus1@gmail.com\",\n        \"gender\": \"male\",\n        \"status\": \"active\"\n    },\n    {\n        \"id\": 7441372,\n        \"name\": \"Maheswar Nair\",\n        \"email\": \"maheswar_nair@morar.example\",\n        \"gender\": \"male\",\n        \"status\": \"inactive\"\n    },\n    {\n        \"id\": 7441370,\n        \"name\": \"Dhanalakshmi Kaul\",\n        \"email\": \"kaul_dhanalakshmi@casper-kemmer.example\",\n        \"gender\": \"female\",\n        \"status\": \"active\"\n    },\n    {\n        \"id\": 7441369,\n        \"name\": \"Udit Singh DDS\",\n        \"email\": \"udit_singh_dds@casper.test\",\n        \"gender\": \"female\",\n        \"status\": \"inactive\"\n    },\n    {\n        \"id\": 7441368,\n        \"name\": \"Rev. Atmanand Khanna\",\n        \"email\": \"khanna_rev_atmanand@smith.example\",\n        \"gender\": \"female\",\n        \"status\": \"active\"\n    },\n    {\n        \"id\": 7441367,\n        \"name\": \"Charak Adiga\",\n        \"email\": \"adiga_charak@erdman.example\",\n        \"gender\": \"male\",\n        \"status\": \"inactive\"\n    },\n    {\n        \"id\": 7441366,\n        \"name\": \"Somnath Rana\",\n        \"email\": \"somnath_rana@morar-kiehn.example\",\n        \"gender\": \"male\",\n        \"status\": \"active\"\n    },\n    {\n        \"id\": 7440593,\n        \"name\": \"Girja Dutta Esq.\",\n        \"email\": \"esq_girja_dutta@mueller.test\",\n        \"gender\": \"female\",\n        \"status\": \"active\"\n    },\n    {\n        \"id\": 7440592,\n        \"name\": \"Pres. Deeptimay Abbott\",\n        \"email\": \"abbott_pres_deeptimay@haley.test\",\n        \"gender\": \"female\",\n        \"status\": \"inactive\"\n    },\n    {\n        \"id\": 7440591,\n        \"name\": \"Chidambaram Dutta\",\n        \"email\": \"dutta_chidambaram@flatley-ebert.example\",\n        \"gender\": \"male\",\n        \"status\": \"inactive\"\n    }\n]"
						}
					]
				},
				{
					"name": "Create user",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Create User - Verify response code is 201 Created\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"    pm.response.to.have.status(\"Created\");\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 5 seconds\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(5000);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify if the response body is received from server\", function () {\r",
									"    pm.response.to.have.body();\r",
									"});\r",
									"\r",
									"pm.test(\"Verify if the response header Content-Type=application/json\", function () {\r",
									"    pm.response.to.have.header(\"Content-Type\",\"application/json; charset=utf-8\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify if the response body contains fields such as id, name, email, gender, status\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"id\");\r",
									"    pm.expect(pm.response.text()).to.include(\"name\");\r",
									"    pm.expect(pm.response.text()).to.include(\"email\");\r",
									"    pm.expect(pm.response.text()).to.include(\"gender\");\r",
									"    pm.expect(pm.response.text()).to.include(\"status\");\r",
									"});\r",
									"\r",
									"pm.test(\"Successful POST request => Verify if gender is [male or female]\", function () {\r",
									"    pm.expect(pm.response.json().gender).to.be.oneOf([\"male\", \"female\"]);\r",
									"});\r",
									"\r",
									"pm.test(\"Successful POST request => Verify if status is [active, or inactive]\", function () {\r",
									"    pm.expect(pm.response.json().status).to.be.oneOf([\"active\", \"inactive\"]);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer 5582f007d8a190ac92d47850fc3ccb4dc14c96e0de5bf83db58270734a7952fe"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\": \"Wisdom Erhabor\",\r\n    \"gender\": \"male\",\r\n    \"email\": \"wisdomochus4@gmail.com\",\r\n    \"status\": \"active\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://gorest.co.in/public/v2/users",
							"protocol": "https",
							"host": [
								"gorest",
								"co",
								"in"
							],
							"path": [
								"public",
								"v2",
								"users"
							]
						},
						"description": "### Add New User\n\nThis endpoint allows you to add a new user to the system.\n\n#### Request Body\n\n- `name` (string, required): The name of the user.\n    \n- `gender` (string, required): The gender of the user.\n    \n- `email` (string, required): The email address of the user.\n    \n- `status` (string, required): The status of the user.\n    \n\n#### Response\n\nUpon successful creation, the endpoint returns the details of the newly created user including:\n\n- `id` (integer): The unique identifier of the user.\n    \n- `name` (string): The name of the user.\n    \n- `email` (string): The email address of the user.\n    \n- `gender` (string): The gender of the user.\n    \n- `status` (string): The status of the user.\n    \n\nExample Response:\n\n``` json\n{\n    \"id\": 0,\n    \"name\": \"\",\n    \"email\": \"\",\n    \"gender\": \"\",\n    \"status\": \"\"\n}\n\n ```"
					},
					"response": [
						{
							"name": "Create user",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer 5582f007d8a190ac92d47850fc3ccb4dc14c96e0de5bf83db58270734a7952fe"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"name\": \"Wisdom Erhabor\",\r\n    \"gender\": \"male\",\r\n    \"email\": \"wisdomochus1@gmail.com\",\r\n    \"status\": \"active\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://gorest.co.in/public/v2/users",
									"protocol": "https",
									"host": [
										"gorest",
										"co",
										"in"
									],
									"path": [
										"public",
										"v2",
										"users"
									]
								}
							},
							"status": "Created",
							"code": 201,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Date",
									"value": "Wed, 02 Oct 2024 08:30:06 GMT"
								},
								{
									"key": "Content-Type",
									"value": "application/json; charset=utf-8"
								},
								{
									"key": "Content-Length",
									"value": "105"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								},
								{
									"key": "Cache-Control",
									"value": "max-age=0, private, must-revalidate"
								},
								{
									"key": "etag",
									"value": "W/\"95e8934f96d0335a0b807f5b59f84dc5\""
								},
								{
									"key": "location",
									"value": "https://gorest.co.in/public/v2/users/7441656"
								},
								{
									"key": "referrer-policy",
									"value": "strict-origin-when-cross-origin"
								},
								{
									"key": "vary",
									"value": "Origin"
								},
								{
									"key": "x-content-type-options",
									"value": "nosniff"
								},
								{
									"key": "x-download-options",
									"value": "noopen"
								},
								{
									"key": "x-frame-options",
									"value": "SAMEORIGIN"
								},
								{
									"key": "x-permitted-cross-domain-policies",
									"value": "none"
								},
								{
									"key": "x-ratelimit-limit",
									"value": "90"
								},
								{
									"key": "x-ratelimit-remaining",
									"value": "89"
								},
								{
									"key": "x-ratelimit-reset",
									"value": "1"
								},
								{
									"key": "x-request-id",
									"value": "c391036a-ff10-4877-b141-a09d4287b54a"
								},
								{
									"key": "x-runtime",
									"value": "0.089555"
								},
								{
									"key": "x-xss-protection",
									"value": "0"
								},
								{
									"key": "CF-Cache-Status",
									"value": "DYNAMIC"
								},
								{
									"key": "Report-To",
									"value": "{\"endpoints\":[{\"url\":\"https:\\/\\/a.nel.cloudflare.com\\/report\\/v4?s=BC16qgqhTVN3usHTgICfV4ERDqj1dFS1SM4QZiq%2FMaGlTUlzYUcUSLG01NjmAnhtNJsBu9Su30nGo3NrvDB4Cdimv6kBCy3PmZ3YlHWq59WzjpHQ36b5TaPciNGtjlQ%3D\"}],\"group\":\"cf-nel\",\"max_age\":604800}"
								},
								{
									"key": "NEL",
									"value": "{\"success_fraction\":0,\"report_to\":\"cf-nel\",\"max_age\":604800}"
								},
								{
									"key": "Server",
									"value": "cloudflare"
								},
								{
									"key": "CF-RAY",
									"value": "8cc3541bd83a6f93-CDG"
								}
							],
							"cookie": [],
							"body": "{\n    \"id\": 7441656,\n    \"name\": \"Wisdom Erhabor\",\n    \"email\": \"wisdomochus1@gmail.com\",\n    \"gender\": \"male\",\n    \"status\": \"active\"\n}"
						}
					]
				},
				{
					"name": "Update user",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Update User - Verify response code is 200 OK\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"    pm.response.to.have.status(\"OK\");\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 5 seconds\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(5000);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify if the response body is received from server\", function () {\r",
									"    pm.response.to.have.body();\r",
									"});\r",
									"\r",
									"pm.test(\"Verify if the response header Content-Type=application/json\", function () {\r",
									"    pm.response.to.have.header(\"Content-Type\",\"application/json; charset=utf-8\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify if the response body contains fields such as id, name, email, gender, status\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"id\");\r",
									"    pm.expect(pm.response.text()).to.include(\"name\");\r",
									"    pm.expect(pm.response.text()).to.include(\"email\");\r",
									"    pm.expect(pm.response.text()).to.include(\"gender\");\r",
									"    pm.expect(pm.response.text()).to.include(\"status\");\r",
									"});\r",
									"\r",
									"pm.test(\"Successful POST request => Verify if gender is [male or female]\", function () {\r",
									"    pm.expect(pm.response.json().gender).to.be.oneOf([\"male\", \"female\"]);\r",
									"});\r",
									"\r",
									"pm.test(\"Successful POST request => Verify if status is [active, or inactive]\", function () {\r",
									"    pm.expect(pm.response.json().status).to.be.oneOf([\"active\", \"inactive\"]);\r",
									"});\r",
									"\r",
									"pm.test(\"JSON Value/key Check ==> Verify if name was updated to :Wisdom Erhabor\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.name).to.eql(\"Wisdom Erhabor\");\r",
									"});\r",
									"\r",
									"pm.test(\"JSON Value/key Check ==> Verify if email is  :wisdomochus1@gmail.com\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.email).to.eql(\"wisdomochus1@gmail.com\");\r",
									"});\r",
									"\r",
									"pm.test(\"JSON Value/key Check ==> Verify if name was updated to :Wisdom Erhabor and email is  :wisdomochus1@gmail.com\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.name).to.eql(\"Wisdom Erhabor\");\r",
									"    pm.expect(jsonData.email).to.eql(\"wisdomochus1@gmail.com\");\r",
									"});\r",
									"\r",
									"// CAPTURE THE RESPONSE ATTRIBUTES\r",
									"\r",
									"//pm.response.code\r",
									"\r",
									"console.log(\"Hello World!\");\r",
									"\r",
									"console.log(pm.response.code);\r",
									"\r",
									"console.log(\"The response code received from server is :\"+pm.response.code);\r",
									"console.log(\"The response message received from server is :\"+pm.response.status);\r",
									"console.log(\"The response time received from server is :\"+pm.response.responseTime+ \" milliseconds\");\r",
									"\r",
									"console.log(\"The response body size received from server is :\");\r",
									"console.log(pm.response.size());\r",
									"console.log(\"The response body (JSON) received from server is :\");\r",
									"console.log(pm.response.json());  // text() body\r",
									"console.log(\"The response body (text) received from server is :\");\r",
									"console.log(pm.response.text());\r",
									"\r",
									"console.log(\"The response headers received from server are :\"+pm.response.headers);\r",
									"\r",
									"// CAPTURE THE REQUEST ATTRIBUTEES\r",
									"\r",
									"console.log(\"The HTTP method used in this API is: \"+pm.request.method);\r",
									"console.log(\"The API URL used in this API is: \"+pm.request.url);\r",
									"console.log(\"The request headers used in this API are: \"+pm.request.headers);\r",
									"console.log(\"The request payload is: \");\r",
									"console.log(pm.request.body);\r",
									"console.log(\"The request size is: \");\r",
									"console.log(pm.request.size());\r",
									"console.log(\"The request name is : \"+pm.info.requestName);\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer 5582f007d8a190ac92d47850fc3ccb4dc14c96e0de5bf83db58270734a7952fe"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\": \"Wisdom Erhabor\",\r\n    \"email\": \"wisdomochus1@gmail.com\",\r\n    \"status\": \"active\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://gorest.co.in/public/v2/users/7441656",
							"protocol": "https",
							"host": [
								"gorest",
								"co",
								"in"
							],
							"path": [
								"public",
								"v2",
								"users",
								"7441656"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete user",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Delete User - Verify response code is 204 No Content\", function () {\r",
									"    pm.response.to.have.status(204);\r",
									"    pm.response.to.have.status(\"No Content\");\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 5 seconds\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(5000);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify if the response body is not received from server\", function () {\r",
									"    pm.response.to.not.have.body();\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer 5582f007d8a190ac92d47850fc3ccb4dc14c96e0de5bf83db58270734a7952fe"
							}
						],
						"url": {
							"raw": "https://gorest.co.in/public/v2/users/7441782",
							"protocol": "https",
							"host": [
								"gorest",
								"co",
								"in"
							],
							"path": [
								"public",
								"v2",
								"users",
								"7441782"
							]
						}
					},
					"response": []
				}
			],
			"description": "This folder consists of positive test cases"
		},
		{
			"name": "COLLECTION / GLOBAL VARIABLES",
			"item": [
				{
					"name": "Create user",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Create User - Verify response code is 201 Created\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"    pm.response.to.have.status(\"Created\");\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// 1. DELETE/CLEAR THE COLLECTION VARIABLE\r",
									"//pm.collectionVariables.unset(\"cAccessToken\");\r",
									"\r",
									"\r",
									"// 2. CREATE/SET THE COLLCECTION VARIABLE\r",
									"//pm.collectionVariables.set(\"cAccessToken\", \"5582f007d8a190ac92d47850fc3ccb4dc14c96e0de5bf83db58270734a7952fe\");\r",
									"\r",
									"// 3. GET THE COLLECTION VARIABLE\r",
									"pm.collectionVariables.get(\"cAccessToken\");\r",
									"\r",
									"console.log(\"The value of cAccessToken is :\"+pm.collectionVariables.get(\"cAccessToken\"))\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{cAccessToken}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\": \"{{$randomFullName}}\",\r\n    \"gender\": \"male\",\r\n    \"email\": \"{{$randomEmail}}\",\r\n    \"status\": \"active\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://gorest.co.in/public/v2/users",
							"protocol": "https",
							"host": [
								"gorest",
								"co",
								"in"
							],
							"path": [
								"public",
								"v2",
								"users"
							]
						},
						"description": "### Add New User\n\nThis endpoint allows you to add a new user to the system.\n\n#### Request Body\n\n- `name` (string, required): The name of the user.\n    \n- `gender` (string, required): The gender of the user.\n    \n- `email` (string, required): The email address of the user.\n    \n- `status` (string, required): The status of the user.\n    \n\n#### Response\n\nUpon successful creation, the endpoint returns the details of the newly created user including:\n\n- `id` (integer): The unique identifier of the user.\n    \n- `name` (string): The name of the user.\n    \n- `email` (string): The email address of the user.\n    \n- `gender` (string): The gender of the user.\n    \n- `status` (string): The status of the user.\n    \n\nExample Response:\n\n``` json\n{\n    \"id\": 0,\n    \"name\": \"\",\n    \"email\": \"\",\n    \"gender\": \"\",\n    \"status\": \"\"\n}\n\n ```"
					},
					"response": []
				},
				{
					"name": "Update user",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Update User - Verify response code is 200 OK\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"    pm.response.to.have.status(\"OK\");\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// 1. DELETE/CLEAR THE GLOBAL VARIABLE\r",
									"//pm.globals.unset(\"gAccessToken\");\r",
									"\r",
									"\r",
									"// 2. CREATE/SET THE GLOBAL VARIABLE\r",
									"//pm.globals.set(\"gAccessToken\", \"5582f007d8a190ac92d47850fc3ccb4dc14c96e0de5bf83db58270734a7952fe\");\r",
									"\r",
									"// 3. GET THE GLOBAL VARIABLE\r",
									"pm.globals.get(\"gAccessToken\");\r",
									"\r",
									"console.log(\"The value of gAccessToken is :\"+pm.globals.get(\"gAccessToken\"))"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{gAccessToken}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\": \"Wisdom Erhabor\",\r\n    \"email\": \"wisdomochus1@gmail.com\",\r\n    \"status\": \"active\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://gorest.co.in/public/v2/users/7441656",
							"protocol": "https",
							"host": [
								"gorest",
								"co",
								"in"
							],
							"path": [
								"public",
								"v2",
								"users",
								"7441656"
							]
						}
					},
					"response": []
				}
			],
			"description": "These variables are created to be specific to one collection only i.e., other collections cannot access another collection variables. These variables can be considered as private variables to the collection where we have defined them.\n\nCreating collection variables in postman\n\n\\- Step by step wizard\n\n\\- manual process  \n\\- using javascripts"
		},
		{
			"name": "ENVIRONMENT VARIABLES",
			"item": [
				{
					"name": "Create user",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Create User - Verify response code is 201 Created\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"    pm.response.to.have.status(\"Created\");\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// 1. DELETE/CLEAR THE ENVIRONMENT VARIABLE\r",
									"//pm.environment.unset(\"envProtocol\");\r",
									"//pm.environment.unset(\"envURL\");\r",
									"\r",
									"// 2. CREATE/SET THE ENVIRONMENT VARIABLE\r",
									"//pm.environment.set(\"envProtocol\", \"https\");\r",
									"//pm.environment.set(\"envURL\", \"gorest.co.in\");\r",
									"\r",
									"// 3. GET THE ENVIRONMENT VARIABLE\r",
									"pm.environment.get(\"envProtocol\");\r",
									"pm.environment.get(\"envURL\");\r",
									"\r",
									"console.log(\"The value of envProtocol is : \"+pm.environment.get(\"envProtocol\"));\r",
									"console.log(\"The value of envURL is : \"+pm.environment.get(\"envURL\"));"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{cAccessToken}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\": \"{{$randomFullName}}\",\r\n    \"gender\": \"male\",\r\n    \"email\": \"{{$randomEmail}}\",\r\n    \"status\": \"active\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{envProtocol}}://{{envURL}}/public/v2/users",
							"protocol": "{{envProtocol}}",
							"host": [
								"{{envURL}}"
							],
							"path": [
								"public",
								"v2",
								"users"
							]
						},
						"description": "### Add New User\n\nThis endpoint allows you to add a new user to the system.\n\n#### Request Body\n\n- `name` (string, required): The name of the user.\n    \n- `gender` (string, required): The gender of the user.\n    \n- `email` (string, required): The email address of the user.\n    \n- `status` (string, required): The status of the user.\n    \n\n#### Response\n\nUpon successful creation, the endpoint returns the details of the newly created user including:\n\n- `id` (integer): The unique identifier of the user.\n    \n- `name` (string): The name of the user.\n    \n- `email` (string): The email address of the user.\n    \n- `gender` (string): The gender of the user.\n    \n- `status` (string): The status of the user.\n    \n\nExample Response:\n\n``` json\n{\n    \"id\": 0,\n    \"name\": \"\",\n    \"email\": \"\",\n    \"gender\": \"\",\n    \"status\": \"\"\n}\n\n ```"
					},
					"response": []
				},
				{
					"name": "Update user",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Update User - Verify response code is 200 OK\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"    pm.response.to.have.status(\"OK\");\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// 1. DELETE/CLEAR THE GLOBAL VARIABLE\r",
									"//pm.globals.unset(\"gAccessToken\");\r",
									"\r",
									"\r",
									"// 2. CREATE/SET THE GLOBAL VARIABLE\r",
									"//pm.globals.set(\"gAccessToken\", \"5582f007d8a190ac92d47850fc3ccb4dc14c96e0de5bf83db58270734a7952fe\");\r",
									"\r",
									"// 3. GET THE GLOBAL VARIABLE\r",
									"pm.globals.get(\"gAccessToken\");\r",
									"\r",
									"console.log(\"The value of gAccessToken is :\"+pm.globals.get(\"gAccessToken\"))"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{gAccessToken}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\": \"Wisdom Erhabor\",\r\n    \"email\": \"wisdomochus1@gmail.com\",\r\n    \"status\": \"active\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{envProtocol}}://{{envURL}}/public/v2/users/7441656",
							"protocol": "{{envProtocol}}",
							"host": [
								"{{envURL}}"
							],
							"path": [
								"public",
								"v2",
								"users",
								"7441656"
							]
						}
					},
					"response": []
				}
			],
			"description": "These variables are created to be specific to one collection only i.e., other collections cannot access another collection variables. These variables can be considered as private variables to the collection where we have defined them.\n\nCreating collection variables in postman\n\n\\- Step by step wizard\n\n\\- manual process  \n\\- using javascripts"
		},
		{
			"name": "DDT - USING CSV",
			"item": [
				{
					"name": "Create user",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Create User - Verify response code is 201 Created\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"    pm.response.to.have.status(\"Created\");\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 5 seconds\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(5000);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify if the response body is received from server\", function () {\r",
									"    pm.response.to.have.body();\r",
									"});\r",
									"\r",
									"pm.test(\"Verify if the response header Content-Type=application/json\", function () {\r",
									"    pm.response.to.have.header(\"Content-Type\",\"application/json; charset=utf-8\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify if the response body contains fields such as id, name, email, gender, status\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"id\");\r",
									"    pm.expect(pm.response.text()).to.include(\"name\");\r",
									"    pm.expect(pm.response.text()).to.include(\"email\");\r",
									"    pm.expect(pm.response.text()).to.include(\"gender\");\r",
									"    pm.expect(pm.response.text()).to.include(\"status\");\r",
									"});\r",
									"\r",
									"pm.test(\"Successful POST request => Verify if gender is [male or female]\", function () {\r",
									"    pm.expect(pm.response.json().gender).to.be.oneOf([\"male\", \"female\"]);\r",
									"});\r",
									"\r",
									"pm.test(\"Successful POST request => Verify if status is [active, or inactive]\", function () {\r",
									"    pm.expect(pm.response.json().status).to.be.oneOf([\"active\", \"inactive\"]);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer 5582f007d8a190ac92d47850fc3ccb4dc14c96e0de5bf83db58270734a7952fe"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\": \"{{name}}\",\r\n    \"gender\": \"{{gender}}\", // This data comes from the csv file\r\n    \"email\": \"{{email}}\",\r\n    \"status\": \"{{status}}\" // This data comes from the csv file\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://gorest.co.in/public/v2/users",
							"protocol": "https",
							"host": [
								"gorest",
								"co",
								"in"
							],
							"path": [
								"public",
								"v2",
								"users"
							]
						},
						"description": "### Add New User\n\nThis endpoint allows you to add a new user to the system.\n\n#### Request Body\n\n- `name` (string, required): The name of the user.\n    \n- `gender` (string, required): The gender of the user.\n    \n- `email` (string, required): The email address of the user.\n    \n- `status` (string, required): The status of the user.\n    \n\n#### Response\n\nUpon successful creation, the endpoint returns the details of the newly created user including:\n\n- `id` (integer): The unique identifier of the user.\n    \n- `name` (string): The name of the user.\n    \n- `email` (string): The email address of the user.\n    \n- `gender` (string): The gender of the user.\n    \n- `status` (string): The status of the user.\n    \n\nExample Response:\n\n``` json\n{\n    \"id\": 0,\n    \"name\": \"\",\n    \"email\": \"\",\n    \"gender\": \"\",\n    \"status\": \"\"\n}\n\n ```"
					},
					"response": [
						{
							"name": "Create user",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer 5582f007d8a190ac92d47850fc3ccb4dc14c96e0de5bf83db58270734a7952fe"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"name\": \"Wisdom Erhabor\",\r\n    \"gender\": \"male\",\r\n    \"email\": \"wisdomochus1@gmail.com\",\r\n    \"status\": \"active\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://gorest.co.in/public/v2/users",
									"protocol": "https",
									"host": [
										"gorest",
										"co",
										"in"
									],
									"path": [
										"public",
										"v2",
										"users"
									]
								}
							},
							"status": "Created",
							"code": 201,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Date",
									"value": "Wed, 02 Oct 2024 08:30:06 GMT"
								},
								{
									"key": "Content-Type",
									"value": "application/json; charset=utf-8"
								},
								{
									"key": "Content-Length",
									"value": "105"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								},
								{
									"key": "Cache-Control",
									"value": "max-age=0, private, must-revalidate"
								},
								{
									"key": "etag",
									"value": "W/\"95e8934f96d0335a0b807f5b59f84dc5\""
								},
								{
									"key": "location",
									"value": "https://gorest.co.in/public/v2/users/7441656"
								},
								{
									"key": "referrer-policy",
									"value": "strict-origin-when-cross-origin"
								},
								{
									"key": "vary",
									"value": "Origin"
								},
								{
									"key": "x-content-type-options",
									"value": "nosniff"
								},
								{
									"key": "x-download-options",
									"value": "noopen"
								},
								{
									"key": "x-frame-options",
									"value": "SAMEORIGIN"
								},
								{
									"key": "x-permitted-cross-domain-policies",
									"value": "none"
								},
								{
									"key": "x-ratelimit-limit",
									"value": "90"
								},
								{
									"key": "x-ratelimit-remaining",
									"value": "89"
								},
								{
									"key": "x-ratelimit-reset",
									"value": "1"
								},
								{
									"key": "x-request-id",
									"value": "c391036a-ff10-4877-b141-a09d4287b54a"
								},
								{
									"key": "x-runtime",
									"value": "0.089555"
								},
								{
									"key": "x-xss-protection",
									"value": "0"
								},
								{
									"key": "CF-Cache-Status",
									"value": "DYNAMIC"
								},
								{
									"key": "Report-To",
									"value": "{\"endpoints\":[{\"url\":\"https:\\/\\/a.nel.cloudflare.com\\/report\\/v4?s=BC16qgqhTVN3usHTgICfV4ERDqj1dFS1SM4QZiq%2FMaGlTUlzYUcUSLG01NjmAnhtNJsBu9Su30nGo3NrvDB4Cdimv6kBCy3PmZ3YlHWq59WzjpHQ36b5TaPciNGtjlQ%3D\"}],\"group\":\"cf-nel\",\"max_age\":604800}"
								},
								{
									"key": "NEL",
									"value": "{\"success_fraction\":0,\"report_to\":\"cf-nel\",\"max_age\":604800}"
								},
								{
									"key": "Server",
									"value": "cloudflare"
								},
								{
									"key": "CF-RAY",
									"value": "8cc3541bd83a6f93-CDG"
								}
							],
							"cookie": [],
							"body": "{\n    \"id\": 7441656,\n    \"name\": \"Wisdom Erhabor\",\n    \"email\": \"wisdomochus1@gmail.com\",\n    \"gender\": \"male\",\n    \"status\": \"active\"\n}"
						}
					]
				},
				{
					"name": "List users API",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"List Users - Verify response code is 200 OK\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"    pm.response.to.have.status(\"OK\");\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 5 seconds\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(5000);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify the response body string received from server\", function () {\r",
									"    pm.response.to.have.body(\"response_body_string\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify if the response body is received from server\", function () {\r",
									"    pm.response.to.have.body();\r",
									"});\r",
									"\r",
									"pm.test(\"Verify if the response header Content-Type=application/json\", function () {\r",
									"    pm.response.to.have.header(\"Content-Type\",\"application/json; charset=utf-8\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify if the response body contains fields such as id, name, email, gender, status\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"id\");\r",
									"    pm.expect(pm.response.text()).to.include(\"name\");\r",
									"    pm.expect(pm.response.text()).to.include(\"email\");\r",
									"    pm.expect(pm.response.text()).to.include(\"gender\");\r",
									"    pm.expect(pm.response.text()).to.include(\"status\");\r",
									"});\r",
									"pm.test(\"Response body has valid Content-Type header\", function () {\r",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "5582f007d8a190ac92d47850fc3ccb4dc14c96e0de5bf83db58270734a7952fe",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer ACCESS-TOKEN"
							}
						],
						"url": {
							"raw": "https://gorest.co.in/public/v2/users",
							"protocol": "https",
							"host": [
								"gorest",
								"co",
								"in"
							],
							"path": [
								"public",
								"v2",
								"users"
							]
						},
						"description": "### Get Users\n\nThis endpoint sends an HTTP GET request to retrieve a list of users from the server.\n\n**Request Body**  \nThis request does not require a request body.\n\n**Response**  \nThe response will include an array of user objects, where each object contains the following fields:\n\n- `id` (number): The unique identifier for the user.\n    \n- `name` (string): The name of the user.\n    \n- `email` (string): The email address of the user.\n    \n- `gender` (string): The gender of the user.\n    \n- `status` (string): The status of the user.\n    \n\nExample response:\n\n``` json\n[\n    {\n        \"id\": 0,\n        \"name\": \"\",\n        \"email\": \"\",\n        \"gender\": \"\",\n        \"status\": \"\"\n    }\n]\n\n ```"
					},
					"response": [
						{
							"name": "List users API",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer ACCESS-TOKEN"
									}
								],
								"url": {
									"raw": "https://gorest.co.in/public/v2/users",
									"protocol": "https",
									"host": [
										"gorest",
										"co",
										"in"
									],
									"path": [
										"public",
										"v2",
										"users"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Date",
									"value": "Wed, 02 Oct 2024 08:46:17 GMT"
								},
								{
									"key": "Content-Type",
									"value": "application/json; charset=utf-8"
								},
								{
									"key": "Transfer-Encoding",
									"value": "chunked"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								},
								{
									"key": "Cache-Control",
									"value": "max-age=0, private, must-revalidate"
								},
								{
									"key": "etag",
									"value": "W/\"04d4ce1780d4f5f061d94e088cb66ca5\""
								},
								{
									"key": "referrer-policy",
									"value": "strict-origin-when-cross-origin"
								},
								{
									"key": "vary",
									"value": "Origin"
								},
								{
									"key": "x-content-type-options",
									"value": "nosniff"
								},
								{
									"key": "x-download-options",
									"value": "noopen"
								},
								{
									"key": "x-frame-options",
									"value": "SAMEORIGIN"
								},
								{
									"key": "x-links-current",
									"value": "https://gorest.co.in/public/v2/users?page=1"
								},
								{
									"key": "x-links-next",
									"value": "https://gorest.co.in/public/v2/users?page=2"
								},
								{
									"key": "x-links-previous",
									"value": ""
								},
								{
									"key": "x-pagination-limit",
									"value": "10"
								},
								{
									"key": "x-pagination-page",
									"value": "1"
								},
								{
									"key": "x-pagination-pages",
									"value": "289"
								},
								{
									"key": "x-pagination-total",
									"value": "2887"
								},
								{
									"key": "x-permitted-cross-domain-policies",
									"value": "none"
								},
								{
									"key": "x-ratelimit-limit",
									"value": "90"
								},
								{
									"key": "x-ratelimit-remaining",
									"value": "89"
								},
								{
									"key": "x-ratelimit-reset",
									"value": "1"
								},
								{
									"key": "x-request-id",
									"value": "a5dfca49-563f-49a2-9e59-02a0326faea8"
								},
								{
									"key": "x-runtime",
									"value": "0.062732"
								},
								{
									"key": "x-xss-protection",
									"value": "0"
								},
								{
									"key": "CF-Cache-Status",
									"value": "DYNAMIC"
								},
								{
									"key": "Report-To",
									"value": "{\"endpoints\":[{\"url\":\"https:\\/\\/a.nel.cloudflare.com\\/report\\/v4?s=ECV%2F1Q6OgJ2HCf8KpmDWhc%2BadUB%2BjjlYiq9eVGvh833YrQc6YycSnYAV39%2BRX8UPSHVRQYhZkKo%2FpIcjyEFmDnVNRFCifJxRRiCxAtQztFJg8MnaXy7i0PifU2hXHtk%3D\"}],\"group\":\"cf-nel\",\"max_age\":604800}"
								},
								{
									"key": "NEL",
									"value": "{\"success_fraction\":0,\"report_to\":\"cf-nel\",\"max_age\":604800}"
								},
								{
									"key": "Server",
									"value": "cloudflare"
								},
								{
									"key": "CF-RAY",
									"value": "8cc36bcbbe88d3dc-CDG"
								},
								{
									"key": "Content-Encoding",
									"value": "br"
								}
							],
							"cookie": [],
							"body": "[\n    {\n        \"id\": 7441656,\n        \"name\": \"Wisdom O. Erhabor\",\n        \"email\": \"wisdomochus1@gmail.com\",\n        \"gender\": \"male\",\n        \"status\": \"active\"\n    },\n    {\n        \"id\": 7441372,\n        \"name\": \"Maheswar Nair\",\n        \"email\": \"maheswar_nair@morar.example\",\n        \"gender\": \"male\",\n        \"status\": \"inactive\"\n    },\n    {\n        \"id\": 7441370,\n        \"name\": \"Dhanalakshmi Kaul\",\n        \"email\": \"kaul_dhanalakshmi@casper-kemmer.example\",\n        \"gender\": \"female\",\n        \"status\": \"active\"\n    },\n    {\n        \"id\": 7441369,\n        \"name\": \"Udit Singh DDS\",\n        \"email\": \"udit_singh_dds@casper.test\",\n        \"gender\": \"female\",\n        \"status\": \"inactive\"\n    },\n    {\n        \"id\": 7441368,\n        \"name\": \"Rev. Atmanand Khanna\",\n        \"email\": \"khanna_rev_atmanand@smith.example\",\n        \"gender\": \"female\",\n        \"status\": \"active\"\n    },\n    {\n        \"id\": 7441367,\n        \"name\": \"Charak Adiga\",\n        \"email\": \"adiga_charak@erdman.example\",\n        \"gender\": \"male\",\n        \"status\": \"inactive\"\n    },\n    {\n        \"id\": 7441366,\n        \"name\": \"Somnath Rana\",\n        \"email\": \"somnath_rana@morar-kiehn.example\",\n        \"gender\": \"male\",\n        \"status\": \"active\"\n    },\n    {\n        \"id\": 7440593,\n        \"name\": \"Girja Dutta Esq.\",\n        \"email\": \"esq_girja_dutta@mueller.test\",\n        \"gender\": \"female\",\n        \"status\": \"active\"\n    },\n    {\n        \"id\": 7440592,\n        \"name\": \"Pres. Deeptimay Abbott\",\n        \"email\": \"abbott_pres_deeptimay@haley.test\",\n        \"gender\": \"female\",\n        \"status\": \"inactive\"\n    },\n    {\n        \"id\": 7440591,\n        \"name\": \"Chidambaram Dutta\",\n        \"email\": \"dutta_chidambaram@flatley-ebert.example\",\n        \"gender\": \"male\",\n        \"status\": \"inactive\"\n    }\n]"
						}
					]
				},
				{
					"name": "Update user",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Update User - Verify response code is 200 OK\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"    pm.response.to.have.status(\"OK\");\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 5 seconds\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(5000);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify if the response body is received from server\", function () {\r",
									"    pm.response.to.have.body();\r",
									"});\r",
									"\r",
									"pm.test(\"Verify if the response header Content-Type=application/json\", function () {\r",
									"    pm.response.to.have.header(\"Content-Type\",\"application/json; charset=utf-8\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify if the response body contains fields such as id, name, email, gender, status\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"id\");\r",
									"    pm.expect(pm.response.text()).to.include(\"name\");\r",
									"    pm.expect(pm.response.text()).to.include(\"email\");\r",
									"    pm.expect(pm.response.text()).to.include(\"gender\");\r",
									"    pm.expect(pm.response.text()).to.include(\"status\");\r",
									"});\r",
									"\r",
									"pm.test(\"Successful POST request => Verify if gender is [male or female]\", function () {\r",
									"    pm.expect(pm.response.json().gender).to.be.oneOf([\"male\", \"female\"]);\r",
									"});\r",
									"\r",
									"pm.test(\"Successful POST request => Verify if status is [active, or inactive]\", function () {\r",
									"    pm.expect(pm.response.json().status).to.be.oneOf([\"active\", \"inactive\"]);\r",
									"});\r",
									"\r",
									"pm.test(\"JSON Value/key Check ==> Verify if name was updated to :Wisdom Erhabor\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.name).to.eql(\"Wisdom Erhabor\");\r",
									"});\r",
									"\r",
									"pm.test(\"JSON Value/key Check ==> Verify if email is  :wisdomochus1@gmail.com\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.email).to.eql(\"wisdomochus1@gmail.com\");\r",
									"});\r",
									"\r",
									"pm.test(\"JSON Value/key Check ==> Verify if name was updated to :Wisdom Erhabor and email is  :wisdomochus1@gmail.com\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.name).to.eql(\"Wisdom Erhabor\");\r",
									"    pm.expect(jsonData.email).to.eql(\"wisdomochus1@gmail.com\");\r",
									"});\r",
									"\r",
									"// CAPTURE THE RESPONSE ATTRIBUTES\r",
									"\r",
									"//pm.response.code\r",
									"\r",
									"console.log(\"Hello World!\");\r",
									"\r",
									"console.log(pm.response.code);\r",
									"\r",
									"console.log(\"The response code received from server is :\"+pm.response.code);\r",
									"console.log(\"The response message received from server is :\"+pm.response.status);\r",
									"console.log(\"The response time received from server is :\"+pm.response.responseTime+ \" milliseconds\");\r",
									"\r",
									"console.log(\"The response body size received from server is :\");\r",
									"console.log(pm.response.size());\r",
									"console.log(\"The response body (JSON) received from server is :\");\r",
									"console.log(pm.response.json());  // text() body\r",
									"console.log(\"The response body (text) received from server is :\");\r",
									"console.log(pm.response.text());\r",
									"\r",
									"console.log(\"The response headers received from server are :\"+pm.response.headers);\r",
									"\r",
									"// CAPTURE THE REQUEST ATTRIBUTEES\r",
									"\r",
									"console.log(\"The HTTP method used in this API is: \"+pm.request.method);\r",
									"console.log(\"The API URL used in this API is: \"+pm.request.url);\r",
									"console.log(\"The request headers used in this API are: \"+pm.request.headers);\r",
									"console.log(\"The request payload is: \");\r",
									"console.log(pm.request.body);\r",
									"console.log(\"The request size is: \");\r",
									"console.log(pm.request.size());\r",
									"console.log(\"The request name is : \"+pm.info.requestName);\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer 5582f007d8a190ac92d47850fc3ccb4dc14c96e0de5bf83db58270734a7952fe"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\": \"{{nameUpdated}}\",\r\n    \"email\": \"{{emailUpdated}}\",\r\n    \"status\": \"{{statusUpdated}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://gorest.co.in/public/v2/users/{{userId}}",
							"protocol": "https",
							"host": [
								"gorest",
								"co",
								"in"
							],
							"path": [
								"public",
								"v2",
								"users",
								"{{userId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete user",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Delete User - Verify response code is 204 No Content\", function () {\r",
									"    pm.response.to.have.status(204);\r",
									"    pm.response.to.have.status(\"No Content\");\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 5 seconds\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(5000);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify if the response body is not received from server\", function () {\r",
									"    pm.response.to.not.have.body();\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer 5582f007d8a190ac92d47850fc3ccb4dc14c96e0de5bf83db58270734a7952fe"
							}
						],
						"url": {
							"raw": "https://gorest.co.in/public/v2/users/{{userIdToDelete}}",
							"protocol": "https",
							"host": [
								"gorest",
								"co",
								"in"
							],
							"path": [
								"public",
								"v2",
								"users",
								"{{userIdToDelete}}"
							]
						}
					},
					"response": []
				}
			],
			"description": "Here, the test engineer controls the test data creation; The test data is created in CSV file."
		},
		{
			"name": "Interoperability testing",
			"item": [
				{
					"name": "List users API - Windows 10 OS + Edge",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"List Users - Verify response code is 200 OK\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"    pm.response.to.have.status(\"OK\");\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 5 seconds\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(5000);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify the response body string received from server\", function () {\r",
									"    pm.response.to.have.body(\"response_body_string\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify if the response body is received from server\", function () {\r",
									"    pm.response.to.have.body();\r",
									"});\r",
									"\r",
									"pm.test(\"Verify if the response header Content-Type=application/json\", function () {\r",
									"    pm.response.to.have.header(\"Content-Type\",\"application/json; charset=utf-8\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify if the response body contains fields such as id, name, email, gender, status\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"id\");\r",
									"    pm.expect(pm.response.text()).to.include(\"name\");\r",
									"    pm.expect(pm.response.text()).to.include(\"email\");\r",
									"    pm.expect(pm.response.text()).to.include(\"gender\");\r",
									"    pm.expect(pm.response.text()).to.include(\"status\");\r",
									"});\r",
									"pm.test(\"Response body has valid Content-Type header\", function () {\r",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {
							"user-agent": true
						}
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "5582f007d8a190ac92d47850fc3ccb4dc14c96e0de5bf83db58270734a7952fe",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer ACCESS-TOKEN"
							},
							{
								"key": "User-Agent",
								"value": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/129.0.0.0 Safari/537.36 Edg/129.0.2792.65",
								"type": "text"
							}
						],
						"url": {
							"raw": "https://gorest.co.in/public/v2/users",
							"protocol": "https",
							"host": [
								"gorest",
								"co",
								"in"
							],
							"path": [
								"public",
								"v2",
								"users"
							]
						},
						"description": "### Get Users\n\nThis endpoint sends an HTTP GET request to retrieve a list of users from the server.\n\n**Request Body**  \nThis request does not require a request body.\n\n**Response**  \nThe response will include an array of user objects, where each object contains the following fields:\n\n- `id` (number): The unique identifier for the user.\n    \n- `name` (string): The name of the user.\n    \n- `email` (string): The email address of the user.\n    \n- `gender` (string): The gender of the user.\n    \n- `status` (string): The status of the user.\n    \n\nExample response:\n\n``` json\n[\n    {\n        \"id\": 0,\n        \"name\": \"\",\n        \"email\": \"\",\n        \"gender\": \"\",\n        \"status\": \"\"\n    }\n]\n\n ```"
					},
					"response": [
						{
							"name": "List users API",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer ACCESS-TOKEN"
									}
								],
								"url": {
									"raw": "https://gorest.co.in/public/v2/users",
									"protocol": "https",
									"host": [
										"gorest",
										"co",
										"in"
									],
									"path": [
										"public",
										"v2",
										"users"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Date",
									"value": "Wed, 02 Oct 2024 08:46:17 GMT"
								},
								{
									"key": "Content-Type",
									"value": "application/json; charset=utf-8"
								},
								{
									"key": "Transfer-Encoding",
									"value": "chunked"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								},
								{
									"key": "Cache-Control",
									"value": "max-age=0, private, must-revalidate"
								},
								{
									"key": "etag",
									"value": "W/\"04d4ce1780d4f5f061d94e088cb66ca5\""
								},
								{
									"key": "referrer-policy",
									"value": "strict-origin-when-cross-origin"
								},
								{
									"key": "vary",
									"value": "Origin"
								},
								{
									"key": "x-content-type-options",
									"value": "nosniff"
								},
								{
									"key": "x-download-options",
									"value": "noopen"
								},
								{
									"key": "x-frame-options",
									"value": "SAMEORIGIN"
								},
								{
									"key": "x-links-current",
									"value": "https://gorest.co.in/public/v2/users?page=1"
								},
								{
									"key": "x-links-next",
									"value": "https://gorest.co.in/public/v2/users?page=2"
								},
								{
									"key": "x-links-previous",
									"value": ""
								},
								{
									"key": "x-pagination-limit",
									"value": "10"
								},
								{
									"key": "x-pagination-page",
									"value": "1"
								},
								{
									"key": "x-pagination-pages",
									"value": "289"
								},
								{
									"key": "x-pagination-total",
									"value": "2887"
								},
								{
									"key": "x-permitted-cross-domain-policies",
									"value": "none"
								},
								{
									"key": "x-ratelimit-limit",
									"value": "90"
								},
								{
									"key": "x-ratelimit-remaining",
									"value": "89"
								},
								{
									"key": "x-ratelimit-reset",
									"value": "1"
								},
								{
									"key": "x-request-id",
									"value": "a5dfca49-563f-49a2-9e59-02a0326faea8"
								},
								{
									"key": "x-runtime",
									"value": "0.062732"
								},
								{
									"key": "x-xss-protection",
									"value": "0"
								},
								{
									"key": "CF-Cache-Status",
									"value": "DYNAMIC"
								},
								{
									"key": "Report-To",
									"value": "{\"endpoints\":[{\"url\":\"https:\\/\\/a.nel.cloudflare.com\\/report\\/v4?s=ECV%2F1Q6OgJ2HCf8KpmDWhc%2BadUB%2BjjlYiq9eVGvh833YrQc6YycSnYAV39%2BRX8UPSHVRQYhZkKo%2FpIcjyEFmDnVNRFCifJxRRiCxAtQztFJg8MnaXy7i0PifU2hXHtk%3D\"}],\"group\":\"cf-nel\",\"max_age\":604800}"
								},
								{
									"key": "NEL",
									"value": "{\"success_fraction\":0,\"report_to\":\"cf-nel\",\"max_age\":604800}"
								},
								{
									"key": "Server",
									"value": "cloudflare"
								},
								{
									"key": "CF-RAY",
									"value": "8cc36bcbbe88d3dc-CDG"
								},
								{
									"key": "Content-Encoding",
									"value": "br"
								}
							],
							"cookie": [],
							"body": "[\n    {\n        \"id\": 7441656,\n        \"name\": \"Wisdom O. Erhabor\",\n        \"email\": \"wisdomochus1@gmail.com\",\n        \"gender\": \"male\",\n        \"status\": \"active\"\n    },\n    {\n        \"id\": 7441372,\n        \"name\": \"Maheswar Nair\",\n        \"email\": \"maheswar_nair@morar.example\",\n        \"gender\": \"male\",\n        \"status\": \"inactive\"\n    },\n    {\n        \"id\": 7441370,\n        \"name\": \"Dhanalakshmi Kaul\",\n        \"email\": \"kaul_dhanalakshmi@casper-kemmer.example\",\n        \"gender\": \"female\",\n        \"status\": \"active\"\n    },\n    {\n        \"id\": 7441369,\n        \"name\": \"Udit Singh DDS\",\n        \"email\": \"udit_singh_dds@casper.test\",\n        \"gender\": \"female\",\n        \"status\": \"inactive\"\n    },\n    {\n        \"id\": 7441368,\n        \"name\": \"Rev. Atmanand Khanna\",\n        \"email\": \"khanna_rev_atmanand@smith.example\",\n        \"gender\": \"female\",\n        \"status\": \"active\"\n    },\n    {\n        \"id\": 7441367,\n        \"name\": \"Charak Adiga\",\n        \"email\": \"adiga_charak@erdman.example\",\n        \"gender\": \"male\",\n        \"status\": \"inactive\"\n    },\n    {\n        \"id\": 7441366,\n        \"name\": \"Somnath Rana\",\n        \"email\": \"somnath_rana@morar-kiehn.example\",\n        \"gender\": \"male\",\n        \"status\": \"active\"\n    },\n    {\n        \"id\": 7440593,\n        \"name\": \"Girja Dutta Esq.\",\n        \"email\": \"esq_girja_dutta@mueller.test\",\n        \"gender\": \"female\",\n        \"status\": \"active\"\n    },\n    {\n        \"id\": 7440592,\n        \"name\": \"Pres. Deeptimay Abbott\",\n        \"email\": \"abbott_pres_deeptimay@haley.test\",\n        \"gender\": \"female\",\n        \"status\": \"inactive\"\n    },\n    {\n        \"id\": 7440591,\n        \"name\": \"Chidambaram Dutta\",\n        \"email\": \"dutta_chidambaram@flatley-ebert.example\",\n        \"gender\": \"male\",\n        \"status\": \"inactive\"\n    }\n]"
						}
					]
				},
				{
					"name": "Create user - Linux OS + Firefox",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Create User - Verify response code is 201 Created\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"    pm.response.to.have.status(\"Created\");\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 5 seconds\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(5000);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify if the response body is received from server\", function () {\r",
									"    pm.response.to.have.body();\r",
									"});\r",
									"\r",
									"pm.test(\"Verify if the response header Content-Type=application/json\", function () {\r",
									"    pm.response.to.have.header(\"Content-Type\",\"application/json; charset=utf-8\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify if the response body contains fields such as id, name, email, gender, status\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"id\");\r",
									"    pm.expect(pm.response.text()).to.include(\"name\");\r",
									"    pm.expect(pm.response.text()).to.include(\"email\");\r",
									"    pm.expect(pm.response.text()).to.include(\"gender\");\r",
									"    pm.expect(pm.response.text()).to.include(\"status\");\r",
									"});\r",
									"\r",
									"pm.test(\"Successful POST request => Verify if gender is [male or female]\", function () {\r",
									"    pm.expect(pm.response.json().gender).to.be.oneOf([\"male\", \"female\"]);\r",
									"});\r",
									"\r",
									"pm.test(\"Successful POST request => Verify if status is [active, or inactive]\", function () {\r",
									"    pm.expect(pm.response.json().status).to.be.oneOf([\"active\", \"inactive\"]);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {
							"user-agent": true
						}
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer 5582f007d8a190ac92d47850fc3ccb4dc14c96e0de5bf83db58270734a7952fe"
							},
							{
								"key": "User-Agent",
								"value": "Mozilla/5.0 (X11; Linux i686; rv:131.0) Gecko/20100101 Firefox/131.0",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\": \"Wisdom Erhabor\",\r\n    \"gender\": \"male\",\r\n    \"email\": \"wisdomochus4@gmail.com\",\r\n    \"status\": \"active\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://gorest.co.in/public/v2/users",
							"protocol": "https",
							"host": [
								"gorest",
								"co",
								"in"
							],
							"path": [
								"public",
								"v2",
								"users"
							]
						},
						"description": "### Add New User\n\nThis endpoint allows you to add a new user to the system.\n\n#### Request Body\n\n- `name` (string, required): The name of the user.\n    \n- `gender` (string, required): The gender of the user.\n    \n- `email` (string, required): The email address of the user.\n    \n- `status` (string, required): The status of the user.\n    \n\n#### Response\n\nUpon successful creation, the endpoint returns the details of the newly created user including:\n\n- `id` (integer): The unique identifier of the user.\n    \n- `name` (string): The name of the user.\n    \n- `email` (string): The email address of the user.\n    \n- `gender` (string): The gender of the user.\n    \n- `status` (string): The status of the user.\n    \n\nExample Response:\n\n``` json\n{\n    \"id\": 0,\n    \"name\": \"\",\n    \"email\": \"\",\n    \"gender\": \"\",\n    \"status\": \"\"\n}\n\n ```"
					},
					"response": [
						{
							"name": "Create user",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer 5582f007d8a190ac92d47850fc3ccb4dc14c96e0de5bf83db58270734a7952fe"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"name\": \"Wisdom Erhabor\",\r\n    \"gender\": \"male\",\r\n    \"email\": \"wisdomochus1@gmail.com\",\r\n    \"status\": \"active\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://gorest.co.in/public/v2/users",
									"protocol": "https",
									"host": [
										"gorest",
										"co",
										"in"
									],
									"path": [
										"public",
										"v2",
										"users"
									]
								}
							},
							"status": "Created",
							"code": 201,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Date",
									"value": "Wed, 02 Oct 2024 08:30:06 GMT"
								},
								{
									"key": "Content-Type",
									"value": "application/json; charset=utf-8"
								},
								{
									"key": "Content-Length",
									"value": "105"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								},
								{
									"key": "Cache-Control",
									"value": "max-age=0, private, must-revalidate"
								},
								{
									"key": "etag",
									"value": "W/\"95e8934f96d0335a0b807f5b59f84dc5\""
								},
								{
									"key": "location",
									"value": "https://gorest.co.in/public/v2/users/7441656"
								},
								{
									"key": "referrer-policy",
									"value": "strict-origin-when-cross-origin"
								},
								{
									"key": "vary",
									"value": "Origin"
								},
								{
									"key": "x-content-type-options",
									"value": "nosniff"
								},
								{
									"key": "x-download-options",
									"value": "noopen"
								},
								{
									"key": "x-frame-options",
									"value": "SAMEORIGIN"
								},
								{
									"key": "x-permitted-cross-domain-policies",
									"value": "none"
								},
								{
									"key": "x-ratelimit-limit",
									"value": "90"
								},
								{
									"key": "x-ratelimit-remaining",
									"value": "89"
								},
								{
									"key": "x-ratelimit-reset",
									"value": "1"
								},
								{
									"key": "x-request-id",
									"value": "c391036a-ff10-4877-b141-a09d4287b54a"
								},
								{
									"key": "x-runtime",
									"value": "0.089555"
								},
								{
									"key": "x-xss-protection",
									"value": "0"
								},
								{
									"key": "CF-Cache-Status",
									"value": "DYNAMIC"
								},
								{
									"key": "Report-To",
									"value": "{\"endpoints\":[{\"url\":\"https:\\/\\/a.nel.cloudflare.com\\/report\\/v4?s=BC16qgqhTVN3usHTgICfV4ERDqj1dFS1SM4QZiq%2FMaGlTUlzYUcUSLG01NjmAnhtNJsBu9Su30nGo3NrvDB4Cdimv6kBCy3PmZ3YlHWq59WzjpHQ36b5TaPciNGtjlQ%3D\"}],\"group\":\"cf-nel\",\"max_age\":604800}"
								},
								{
									"key": "NEL",
									"value": "{\"success_fraction\":0,\"report_to\":\"cf-nel\",\"max_age\":604800}"
								},
								{
									"key": "Server",
									"value": "cloudflare"
								},
								{
									"key": "CF-RAY",
									"value": "8cc3541bd83a6f93-CDG"
								}
							],
							"cookie": [],
							"body": "{\n    \"id\": 7441656,\n    \"name\": \"Wisdom Erhabor\",\n    \"email\": \"wisdomochus1@gmail.com\",\n    \"gender\": \"male\",\n    \"status\": \"active\"\n}"
						}
					]
				},
				{
					"name": "Update user - Mac OS + Safari",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Update User - Verify response code is 200 OK\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"    pm.response.to.have.status(\"OK\");\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 5 seconds\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(5000);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify if the response body is received from server\", function () {\r",
									"    pm.response.to.have.body();\r",
									"});\r",
									"\r",
									"pm.test(\"Verify if the response header Content-Type=application/json\", function () {\r",
									"    pm.response.to.have.header(\"Content-Type\",\"application/json; charset=utf-8\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify if the response body contains fields such as id, name, email, gender, status\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"id\");\r",
									"    pm.expect(pm.response.text()).to.include(\"name\");\r",
									"    pm.expect(pm.response.text()).to.include(\"email\");\r",
									"    pm.expect(pm.response.text()).to.include(\"gender\");\r",
									"    pm.expect(pm.response.text()).to.include(\"status\");\r",
									"});\r",
									"\r",
									"pm.test(\"Successful POST request => Verify if gender is [male or female]\", function () {\r",
									"    pm.expect(pm.response.json().gender).to.be.oneOf([\"male\", \"female\"]);\r",
									"});\r",
									"\r",
									"pm.test(\"Successful POST request => Verify if status is [active, or inactive]\", function () {\r",
									"    pm.expect(pm.response.json().status).to.be.oneOf([\"active\", \"inactive\"]);\r",
									"});\r",
									"\r",
									"pm.test(\"JSON Value/key Check ==> Verify if name was updated to :Wisdom Erhabor\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.name).to.eql(\"Wisdom Erhabor\");\r",
									"});\r",
									"\r",
									"pm.test(\"JSON Value/key Check ==> Verify if email is  :wisdomochus1@gmail.com\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.email).to.eql(\"wisdomochus1@gmail.com\");\r",
									"});\r",
									"\r",
									"pm.test(\"JSON Value/key Check ==> Verify if name was updated to :Wisdom Erhabor and email is  :wisdomochus1@gmail.com\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.name).to.eql(\"Wisdom Erhabor\");\r",
									"    pm.expect(jsonData.email).to.eql(\"wisdomochus1@gmail.com\");\r",
									"});\r",
									"\r",
									"// CAPTURE THE RESPONSE ATTRIBUTES\r",
									"\r",
									"//pm.response.code\r",
									"\r",
									"console.log(\"Hello World!\");\r",
									"\r",
									"console.log(pm.response.code);\r",
									"\r",
									"console.log(\"The response code received from server is :\"+pm.response.code);\r",
									"console.log(\"The response message received from server is :\"+pm.response.status);\r",
									"console.log(\"The response time received from server is :\"+pm.response.responseTime+ \" milliseconds\");\r",
									"\r",
									"console.log(\"The response body size received from server is :\");\r",
									"console.log(pm.response.size());\r",
									"console.log(\"The response body (JSON) received from server is :\");\r",
									"console.log(pm.response.json());  // text() body\r",
									"console.log(\"The response body (text) received from server is :\");\r",
									"console.log(pm.response.text());\r",
									"\r",
									"console.log(\"The response headers received from server are :\"+pm.response.headers);\r",
									"\r",
									"// CAPTURE THE REQUEST ATTRIBUTEES\r",
									"\r",
									"console.log(\"The HTTP method used in this API is: \"+pm.request.method);\r",
									"console.log(\"The API URL used in this API is: \"+pm.request.url);\r",
									"console.log(\"The request headers used in this API are: \"+pm.request.headers);\r",
									"console.log(\"The request payload is: \");\r",
									"console.log(pm.request.body);\r",
									"console.log(\"The request size is: \");\r",
									"console.log(pm.request.size());\r",
									"console.log(\"The request name is : \"+pm.info.requestName);\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {
							"user-agent": true
						}
					},
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer 5582f007d8a190ac92d47850fc3ccb4dc14c96e0de5bf83db58270734a7952fe"
							},
							{
								"key": "User-Agent",
								"value": "Mozilla/5.0 (Macintosh; Intel Mac OS X 14_7) AppleWebKit/605.1.15 (KHTML, like Gecko) Version/18.0 Safari/605.1.15",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\": \"Wisdom Erhabor\",\r\n    \"email\": \"wisdomochus1@gmail.com\",\r\n    \"status\": \"active\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://gorest.co.in/public/v2/users/7441656",
							"protocol": "https",
							"host": [
								"gorest",
								"co",
								"in"
							],
							"path": [
								"public",
								"v2",
								"users",
								"7441656"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete user - Andriod OS + Chrome",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Delete User - Verify response code is 204 No Content\", function () {\r",
									"    pm.response.to.have.status(204);\r",
									"    pm.response.to.have.status(\"No Content\");\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 5 seconds\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(5000);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify if the response body is not received from server\", function () {\r",
									"    pm.response.to.not.have.body();\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {
							"user-agent": true
						}
					},
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer 5582f007d8a190ac92d47850fc3ccb4dc14c96e0de5bf83db58270734a7952fe"
							},
							{
								"key": "User-Agent",
								"value": "Mozilla/5.0 (Linux; Android 10; K) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/129.0.6668.69 Mobile Safari/537.36",
								"type": "text"
							}
						],
						"url": {
							"raw": "https://gorest.co.in/public/v2/users/7441763",
							"protocol": "https",
							"host": [
								"gorest",
								"co",
								"in"
							],
							"path": [
								"public",
								"v2",
								"users",
								"7441763"
							]
						}
					},
					"response": []
				}
			],
			"description": "To verify if the API responds on various browsers, browser versions and OS.  \nThis is done by simulating the \"User-Agent\" request header in Postman.\n\nTo get User-Agent List visit; [https://www.whatismybrowser.com/guides/the-latest-user-agent/edge](https://www.whatismybrowser.com/guides/the-latest-user-agent/edge)\n\nStartFragment\n\n## Windows 10 OS + Edge:\n\n- Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/129.0.0.0 Safari/537.36 Edg/129.0.2792.65\n    \n\n## Linux OS + Firefox:\n\n- Mozilla/5.0 (X11; Linux i686; rv:131.0) Gecko/20100101 Firefox/131.0\n    \n\n## Mac OS + Safari:\n\n- Mozilla/5.0 (Macintosh; Intel Mac OS X 14_7) AppleWebKit/605.1.15 (KHTML, like Gecko) Version/18.0 Safari/605.1.15\n    \n\n## Andriod OS + Chrome:\n\n- Mozilla/5.0 (Linux; Android 10; K) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/129.0.6668.69 Mobile Safari/537.36"
		},
		{
			"name": "FUZZ DDT - Interoperability testing",
			"item": [
				{
					"name": "List users API - Windows 10 OS + Edge",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"List Users - Verify response code is 200 OK\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"    pm.response.to.have.status(\"OK\");\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 5 seconds\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(5000);\r",
									"});\r",
									"\r",
									"pm.test.skip(\"Verify the response body string received from server\", function () {\r",
									"    pm.response.to.have.body(\"response_body_string\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify if the response body is received from server\", function () {\r",
									"    pm.response.to.have.body();\r",
									"});\r",
									"\r",
									"pm.test(\"Verify if the response header Content-Type=application/json\", function () {\r",
									"    pm.response.to.have.header(\"Content-Type\",\"application/json; charset=utf-8\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify if the response body contains fields such as id, name, email, gender, status\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"id\");\r",
									"    pm.expect(pm.response.text()).to.include(\"name\");\r",
									"    pm.expect(pm.response.text()).to.include(\"email\");\r",
									"    pm.expect(pm.response.text()).to.include(\"gender\");\r",
									"    pm.expect(pm.response.text()).to.include(\"status\");\r",
									"});\r",
									"pm.test(\"Response body has valid Content-Type header\", function () {\r",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {
							"user-agent": true
						}
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "5582f007d8a190ac92d47850fc3ccb4dc14c96e0de5bf83db58270734a7952fe",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer ACCESS-TOKEN"
							},
							{
								"key": "User-Agent",
								"value": "{{$randomUserAgent}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "https://gorest.co.in/public/v2/users",
							"protocol": "https",
							"host": [
								"gorest",
								"co",
								"in"
							],
							"path": [
								"public",
								"v2",
								"users"
							]
						},
						"description": "### Get Users\n\nThis endpoint sends an HTTP GET request to retrieve a list of users from the server.\n\n**Request Body**  \nThis request does not require a request body.\n\n**Response**  \nThe response will include an array of user objects, where each object contains the following fields:\n\n- `id` (number): The unique identifier for the user.\n    \n- `name` (string): The name of the user.\n    \n- `email` (string): The email address of the user.\n    \n- `gender` (string): The gender of the user.\n    \n- `status` (string): The status of the user.\n    \n\nExample response:\n\n``` json\n[\n    {\n        \"id\": 0,\n        \"name\": \"\",\n        \"email\": \"\",\n        \"gender\": \"\",\n        \"status\": \"\"\n    }\n]\n\n ```"
					},
					"response": [
						{
							"name": "List users API",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer ACCESS-TOKEN"
									}
								],
								"url": {
									"raw": "https://gorest.co.in/public/v2/users",
									"protocol": "https",
									"host": [
										"gorest",
										"co",
										"in"
									],
									"path": [
										"public",
										"v2",
										"users"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Date",
									"value": "Wed, 02 Oct 2024 08:46:17 GMT"
								},
								{
									"key": "Content-Type",
									"value": "application/json; charset=utf-8"
								},
								{
									"key": "Transfer-Encoding",
									"value": "chunked"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								},
								{
									"key": "Cache-Control",
									"value": "max-age=0, private, must-revalidate"
								},
								{
									"key": "etag",
									"value": "W/\"04d4ce1780d4f5f061d94e088cb66ca5\""
								},
								{
									"key": "referrer-policy",
									"value": "strict-origin-when-cross-origin"
								},
								{
									"key": "vary",
									"value": "Origin"
								},
								{
									"key": "x-content-type-options",
									"value": "nosniff"
								},
								{
									"key": "x-download-options",
									"value": "noopen"
								},
								{
									"key": "x-frame-options",
									"value": "SAMEORIGIN"
								},
								{
									"key": "x-links-current",
									"value": "https://gorest.co.in/public/v2/users?page=1"
								},
								{
									"key": "x-links-next",
									"value": "https://gorest.co.in/public/v2/users?page=2"
								},
								{
									"key": "x-links-previous",
									"value": ""
								},
								{
									"key": "x-pagination-limit",
									"value": "10"
								},
								{
									"key": "x-pagination-page",
									"value": "1"
								},
								{
									"key": "x-pagination-pages",
									"value": "289"
								},
								{
									"key": "x-pagination-total",
									"value": "2887"
								},
								{
									"key": "x-permitted-cross-domain-policies",
									"value": "none"
								},
								{
									"key": "x-ratelimit-limit",
									"value": "90"
								},
								{
									"key": "x-ratelimit-remaining",
									"value": "89"
								},
								{
									"key": "x-ratelimit-reset",
									"value": "1"
								},
								{
									"key": "x-request-id",
									"value": "a5dfca49-563f-49a2-9e59-02a0326faea8"
								},
								{
									"key": "x-runtime",
									"value": "0.062732"
								},
								{
									"key": "x-xss-protection",
									"value": "0"
								},
								{
									"key": "CF-Cache-Status",
									"value": "DYNAMIC"
								},
								{
									"key": "Report-To",
									"value": "{\"endpoints\":[{\"url\":\"https:\\/\\/a.nel.cloudflare.com\\/report\\/v4?s=ECV%2F1Q6OgJ2HCf8KpmDWhc%2BadUB%2BjjlYiq9eVGvh833YrQc6YycSnYAV39%2BRX8UPSHVRQYhZkKo%2FpIcjyEFmDnVNRFCifJxRRiCxAtQztFJg8MnaXy7i0PifU2hXHtk%3D\"}],\"group\":\"cf-nel\",\"max_age\":604800}"
								},
								{
									"key": "NEL",
									"value": "{\"success_fraction\":0,\"report_to\":\"cf-nel\",\"max_age\":604800}"
								},
								{
									"key": "Server",
									"value": "cloudflare"
								},
								{
									"key": "CF-RAY",
									"value": "8cc36bcbbe88d3dc-CDG"
								},
								{
									"key": "Content-Encoding",
									"value": "br"
								}
							],
							"cookie": [],
							"body": "[\n    {\n        \"id\": 7441656,\n        \"name\": \"Wisdom O. Erhabor\",\n        \"email\": \"wisdomochus1@gmail.com\",\n        \"gender\": \"male\",\n        \"status\": \"active\"\n    },\n    {\n        \"id\": 7441372,\n        \"name\": \"Maheswar Nair\",\n        \"email\": \"maheswar_nair@morar.example\",\n        \"gender\": \"male\",\n        \"status\": \"inactive\"\n    },\n    {\n        \"id\": 7441370,\n        \"name\": \"Dhanalakshmi Kaul\",\n        \"email\": \"kaul_dhanalakshmi@casper-kemmer.example\",\n        \"gender\": \"female\",\n        \"status\": \"active\"\n    },\n    {\n        \"id\": 7441369,\n        \"name\": \"Udit Singh DDS\",\n        \"email\": \"udit_singh_dds@casper.test\",\n        \"gender\": \"female\",\n        \"status\": \"inactive\"\n    },\n    {\n        \"id\": 7441368,\n        \"name\": \"Rev. Atmanand Khanna\",\n        \"email\": \"khanna_rev_atmanand@smith.example\",\n        \"gender\": \"female\",\n        \"status\": \"active\"\n    },\n    {\n        \"id\": 7441367,\n        \"name\": \"Charak Adiga\",\n        \"email\": \"adiga_charak@erdman.example\",\n        \"gender\": \"male\",\n        \"status\": \"inactive\"\n    },\n    {\n        \"id\": 7441366,\n        \"name\": \"Somnath Rana\",\n        \"email\": \"somnath_rana@morar-kiehn.example\",\n        \"gender\": \"male\",\n        \"status\": \"active\"\n    },\n    {\n        \"id\": 7440593,\n        \"name\": \"Girja Dutta Esq.\",\n        \"email\": \"esq_girja_dutta@mueller.test\",\n        \"gender\": \"female\",\n        \"status\": \"active\"\n    },\n    {\n        \"id\": 7440592,\n        \"name\": \"Pres. Deeptimay Abbott\",\n        \"email\": \"abbott_pres_deeptimay@haley.test\",\n        \"gender\": \"female\",\n        \"status\": \"inactive\"\n    },\n    {\n        \"id\": 7440591,\n        \"name\": \"Chidambaram Dutta\",\n        \"email\": \"dutta_chidambaram@flatley-ebert.example\",\n        \"gender\": \"male\",\n        \"status\": \"inactive\"\n    }\n]"
						}
					]
				},
				{
					"name": "Create user - Linux OS + Firefox",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Create User - Verify response code is 201 Created\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"    pm.response.to.have.status(\"Created\");\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 5 seconds\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(5000);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify if the response body is received from server\", function () {\r",
									"    pm.response.to.have.body();\r",
									"});\r",
									"\r",
									"pm.test(\"Verify if the response header Content-Type=application/json\", function () {\r",
									"    pm.response.to.have.header(\"Content-Type\",\"application/json; charset=utf-8\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify if the response body contains fields such as id, name, email, gender, status\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"id\");\r",
									"    pm.expect(pm.response.text()).to.include(\"name\");\r",
									"    pm.expect(pm.response.text()).to.include(\"email\");\r",
									"    pm.expect(pm.response.text()).to.include(\"gender\");\r",
									"    pm.expect(pm.response.text()).to.include(\"status\");\r",
									"});\r",
									"\r",
									"pm.test(\"Successful POST request => Verify if gender is [male or female]\", function () {\r",
									"    pm.expect(pm.response.json().gender).to.be.oneOf([\"male\", \"female\"]);\r",
									"});\r",
									"\r",
									"pm.test(\"Successful POST request => Verify if status is [active, or inactive]\", function () {\r",
									"    pm.expect(pm.response.json().status).to.be.oneOf([\"active\", \"inactive\"]);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {
							"user-agent": true
						}
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer 5582f007d8a190ac92d47850fc3ccb4dc14c96e0de5bf83db58270734a7952fe"
							},
							{
								"key": "User-Agent",
								"value": "{{$randomUserAgent}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\": \"{{$randomFullName}}\",\r\n    \"gender\": \"male\",\r\n    \"email\": \"{{$randomEmail}}\",\r\n    \"status\": \"active\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://gorest.co.in/public/v2/users",
							"protocol": "https",
							"host": [
								"gorest",
								"co",
								"in"
							],
							"path": [
								"public",
								"v2",
								"users"
							]
						},
						"description": "### Add New User\n\nThis endpoint allows you to add a new user to the system.\n\n#### Request Body\n\n- `name` (string, required): The name of the user.\n    \n- `gender` (string, required): The gender of the user.\n    \n- `email` (string, required): The email address of the user.\n    \n- `status` (string, required): The status of the user.\n    \n\n#### Response\n\nUpon successful creation, the endpoint returns the details of the newly created user including:\n\n- `id` (integer): The unique identifier of the user.\n    \n- `name` (string): The name of the user.\n    \n- `email` (string): The email address of the user.\n    \n- `gender` (string): The gender of the user.\n    \n- `status` (string): The status of the user.\n    \n\nExample Response:\n\n``` json\n{\n    \"id\": 0,\n    \"name\": \"\",\n    \"email\": \"\",\n    \"gender\": \"\",\n    \"status\": \"\"\n}\n\n ```"
					},
					"response": [
						{
							"name": "Create user",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer 5582f007d8a190ac92d47850fc3ccb4dc14c96e0de5bf83db58270734a7952fe"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"name\": \"Wisdom Erhabor\",\r\n    \"gender\": \"male\",\r\n    \"email\": \"wisdomochus1@gmail.com\",\r\n    \"status\": \"active\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://gorest.co.in/public/v2/users",
									"protocol": "https",
									"host": [
										"gorest",
										"co",
										"in"
									],
									"path": [
										"public",
										"v2",
										"users"
									]
								}
							},
							"status": "Created",
							"code": 201,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Date",
									"value": "Wed, 02 Oct 2024 08:30:06 GMT"
								},
								{
									"key": "Content-Type",
									"value": "application/json; charset=utf-8"
								},
								{
									"key": "Content-Length",
									"value": "105"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								},
								{
									"key": "Cache-Control",
									"value": "max-age=0, private, must-revalidate"
								},
								{
									"key": "etag",
									"value": "W/\"95e8934f96d0335a0b807f5b59f84dc5\""
								},
								{
									"key": "location",
									"value": "https://gorest.co.in/public/v2/users/7441656"
								},
								{
									"key": "referrer-policy",
									"value": "strict-origin-when-cross-origin"
								},
								{
									"key": "vary",
									"value": "Origin"
								},
								{
									"key": "x-content-type-options",
									"value": "nosniff"
								},
								{
									"key": "x-download-options",
									"value": "noopen"
								},
								{
									"key": "x-frame-options",
									"value": "SAMEORIGIN"
								},
								{
									"key": "x-permitted-cross-domain-policies",
									"value": "none"
								},
								{
									"key": "x-ratelimit-limit",
									"value": "90"
								},
								{
									"key": "x-ratelimit-remaining",
									"value": "89"
								},
								{
									"key": "x-ratelimit-reset",
									"value": "1"
								},
								{
									"key": "x-request-id",
									"value": "c391036a-ff10-4877-b141-a09d4287b54a"
								},
								{
									"key": "x-runtime",
									"value": "0.089555"
								},
								{
									"key": "x-xss-protection",
									"value": "0"
								},
								{
									"key": "CF-Cache-Status",
									"value": "DYNAMIC"
								},
								{
									"key": "Report-To",
									"value": "{\"endpoints\":[{\"url\":\"https:\\/\\/a.nel.cloudflare.com\\/report\\/v4?s=BC16qgqhTVN3usHTgICfV4ERDqj1dFS1SM4QZiq%2FMaGlTUlzYUcUSLG01NjmAnhtNJsBu9Su30nGo3NrvDB4Cdimv6kBCy3PmZ3YlHWq59WzjpHQ36b5TaPciNGtjlQ%3D\"}],\"group\":\"cf-nel\",\"max_age\":604800}"
								},
								{
									"key": "NEL",
									"value": "{\"success_fraction\":0,\"report_to\":\"cf-nel\",\"max_age\":604800}"
								},
								{
									"key": "Server",
									"value": "cloudflare"
								},
								{
									"key": "CF-RAY",
									"value": "8cc3541bd83a6f93-CDG"
								}
							],
							"cookie": [],
							"body": "{\n    \"id\": 7441656,\n    \"name\": \"Wisdom Erhabor\",\n    \"email\": \"wisdomochus1@gmail.com\",\n    \"gender\": \"male\",\n    \"status\": \"active\"\n}"
						}
					]
				},
				{
					"name": "Update user - Mac OS + Safari",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Update User - Verify response code is 200 OK\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"    pm.response.to.have.status(\"OK\");\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 5 seconds\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(5000);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify if the response body is received from server\", function () {\r",
									"    pm.response.to.have.body();\r",
									"});\r",
									"\r",
									"pm.test(\"Verify if the response header Content-Type=application/json\", function () {\r",
									"    pm.response.to.have.header(\"Content-Type\",\"application/json; charset=utf-8\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify if the response body contains fields such as id, name, email, gender, status\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"id\");\r",
									"    pm.expect(pm.response.text()).to.include(\"name\");\r",
									"    pm.expect(pm.response.text()).to.include(\"email\");\r",
									"    pm.expect(pm.response.text()).to.include(\"gender\");\r",
									"    pm.expect(pm.response.text()).to.include(\"status\");\r",
									"});\r",
									"\r",
									"pm.test(\"Successful POST request => Verify if gender is [male or female]\", function () {\r",
									"    pm.expect(pm.response.json().gender).to.be.oneOf([\"male\", \"female\"]);\r",
									"});\r",
									"\r",
									"pm.test(\"Successful POST request => Verify if status is [active, or inactive]\", function () {\r",
									"    pm.expect(pm.response.json().status).to.be.oneOf([\"active\", \"inactive\"]);\r",
									"});\r",
									"\r",
									"pm.test(\"JSON Value/key Check ==> Verify if name was updated to :Wisdom Erhabor\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.name).to.eql(\"Wisdom Erhabor\");\r",
									"});\r",
									"\r",
									"pm.test(\"JSON Value/key Check ==> Verify if email is  :wisdomochus1@gmail.com\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.email).to.eql(\"wisdomochus1@gmail.com\");\r",
									"});\r",
									"\r",
									"pm.test(\"JSON Value/key Check ==> Verify if name was updated to :Wisdom Erhabor and email is  :wisdomochus1@gmail.com\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.name).to.eql(\"Wisdom Erhabor\");\r",
									"    pm.expect(jsonData.email).to.eql(\"wisdomochus1@gmail.com\");\r",
									"});\r",
									"\r",
									"// CAPTURE THE RESPONSE ATTRIBUTES\r",
									"\r",
									"//pm.response.code\r",
									"\r",
									"console.log(\"Hello World!\");\r",
									"\r",
									"console.log(pm.response.code);\r",
									"\r",
									"console.log(\"The response code received from server is :\"+pm.response.code);\r",
									"console.log(\"The response message received from server is :\"+pm.response.status);\r",
									"console.log(\"The response time received from server is :\"+pm.response.responseTime+ \" milliseconds\");\r",
									"\r",
									"console.log(\"The response body size received from server is :\");\r",
									"console.log(pm.response.size());\r",
									"console.log(\"The response body (JSON) received from server is :\");\r",
									"console.log(pm.response.json());  // text() body\r",
									"console.log(\"The response body (text) received from server is :\");\r",
									"console.log(pm.response.text());\r",
									"\r",
									"console.log(\"The response headers received from server are :\"+pm.response.headers);\r",
									"\r",
									"// CAPTURE THE REQUEST ATTRIBUTEES\r",
									"\r",
									"console.log(\"The HTTP method used in this API is: \"+pm.request.method);\r",
									"console.log(\"The API URL used in this API is: \"+pm.request.url);\r",
									"console.log(\"The request headers used in this API are: \"+pm.request.headers);\r",
									"console.log(\"The request payload is: \");\r",
									"console.log(pm.request.body);\r",
									"console.log(\"The request size is: \");\r",
									"console.log(pm.request.size());\r",
									"console.log(\"The request name is : \"+pm.info.requestName);\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {
							"user-agent": true
						}
					},
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer 5582f007d8a190ac92d47850fc3ccb4dc14c96e0de5bf83db58270734a7952fe"
							},
							{
								"key": "User-Agent",
								"value": "{{$randomUserAgent}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\": \"Wisdom Erhabor\",\r\n    \"email\": \"wisdomochus1@gmail.com\",\r\n    \"status\": \"active\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://gorest.co.in/public/v2/users/7441656",
							"protocol": "https",
							"host": [
								"gorest",
								"co",
								"in"
							],
							"path": [
								"public",
								"v2",
								"users",
								"7441656"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete user - Andriod OS + Chrome",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Delete User - Verify response code is 204 No Content\", function () {\r",
									"    pm.response.to.have.status(204);\r",
									"    pm.response.to.have.status(\"No Content\");\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 5 seconds\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(5000);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify if the response body is not received from server\", function () {\r",
									"    pm.response.to.not.have.body();\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {
							"user-agent": true
						}
					},
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer 5582f007d8a190ac92d47850fc3ccb4dc14c96e0de5bf83db58270734a7952fe"
							},
							{
								"key": "User-Agent",
								"value": "{{$randomUserAgent}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "https://gorest.co.in/public/v2/users/7441763",
							"protocol": "https",
							"host": [
								"gorest",
								"co",
								"in"
							],
							"path": [
								"public",
								"v2",
								"users",
								"7441763"
							]
						}
					},
					"response": []
				}
			],
			"description": "Here, we use postman built-in functions to generate random data.\n\nTo verify if the API responds on various browsers, browser versions and OS.  \nThis is done by simulating the \"User-Agent\" request header in Postman.\n\nSearch Postman Faker Library to random functions;  \nURL: [https://learning.postman.com/docs/tests-and-scripts/write-scripts/variables-list/](https://learning.postman.com/docs/tests-and-scripts/write-scripts/variables-list/)"
		},
		{
			"name": "API CHAINING",
			"item": [
				{
					"name": "Create user",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Create User - Verify response code is 201 Created\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"    pm.response.to.have.status(\"Created\");\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 5 seconds\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(5000);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify if the response body is received from server\", function () {\r",
									"    pm.response.to.have.body();\r",
									"});\r",
									"\r",
									"pm.test(\"Verify if the response header Content-Type=application/json\", function () {\r",
									"    pm.response.to.have.header(\"Content-Type\",\"application/json; charset=utf-8\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify if the response body contains fields such as id, name, email, gender, status\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"id\");\r",
									"    pm.expect(pm.response.text()).to.include(\"name\");\r",
									"    pm.expect(pm.response.text()).to.include(\"email\");\r",
									"    pm.expect(pm.response.text()).to.include(\"gender\");\r",
									"    pm.expect(pm.response.text()).to.include(\"status\");\r",
									"});\r",
									"\r",
									"pm.test(\"Successful POST request => Verify if gender is [male or female]\", function () {\r",
									"    pm.expect(pm.response.json().gender).to.be.oneOf([\"male\", \"female\"]);\r",
									"});\r",
									"\r",
									"pm.test(\"Successful POST request => Verify if status is [active, or inactive]\", function () {\r",
									"    pm.expect(pm.response.json().status).to.be.oneOf([\"active\", \"inactive\"]);\r",
									"});\r",
									"\r",
									"\r",
									"// API CHAINING CODE //\r",
									"\r",
									"// 1. Extract the response of the API and store it in a local variable\r",
									"\r",
									"var jsonBody = pm.response.json();\r",
									"\r",
									"// 2. Extract the required field(s) and store it in a local variable\r",
									"\r",
									"var extractedID = jsonBody.id;\r",
									"var extractedName = jsonBody.name;\r",
									"var extractedEmail = jsonBody.email;\r",
									"var extractedStatus = jsonBody.status;\r",
									"\r",
									"//3. Convert local variable to global variables using the snippets\r",
									"\r",
									"pm.globals.set(\"globalID\", extractedID);\r",
									"pm.globals.set(\"globalName\", extractedName);\r",
									"pm.globals.set(\"globalEmail\", extractedEmail);\r",
									"pm.globals.set(\"globalStatus\", extractedStatus);\r",
									"\r",
									"\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {
							"user-agent": true
						}
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer 5582f007d8a190ac92d47850fc3ccb4dc14c96e0de5bf83db58270734a7952fe"
							},
							{
								"key": "User-Agent",
								"value": "{{$randomUserAgent}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\": \"{{$randomFullName}}\",\r\n    \"gender\": \"male\",\r\n    \"email\": \"{{$randomEmail}}\",\r\n    \"status\": \"active\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://gorest.co.in/public/v2/users",
							"protocol": "https",
							"host": [
								"gorest",
								"co",
								"in"
							],
							"path": [
								"public",
								"v2",
								"users"
							]
						},
						"description": "### Add New User\n\nThis endpoint allows you to add a new user to the system.\n\n#### Request Body\n\n- `name` (string, required): The name of the user.\n    \n- `gender` (string, required): The gender of the user.\n    \n- `email` (string, required): The email address of the user.\n    \n- `status` (string, required): The status of the user.\n    \n\n#### Response\n\nUpon successful creation, the endpoint returns the details of the newly created user including:\n\n- `id` (integer): The unique identifier of the user.\n    \n- `name` (string): The name of the user.\n    \n- `email` (string): The email address of the user.\n    \n- `gender` (string): The gender of the user.\n    \n- `status` (string): The status of the user.\n    \n\nExample Response:\n\n``` json\n{\n    \"id\": 0,\n    \"name\": \"\",\n    \"email\": \"\",\n    \"gender\": \"\",\n    \"status\": \"\"\n}\n\n ```"
					},
					"response": [
						{
							"name": "Create user",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer 5582f007d8a190ac92d47850fc3ccb4dc14c96e0de5bf83db58270734a7952fe"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"name\": \"Wisdom Erhabor\",\r\n    \"gender\": \"male\",\r\n    \"email\": \"wisdomochus1@gmail.com\",\r\n    \"status\": \"active\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://gorest.co.in/public/v2/users",
									"protocol": "https",
									"host": [
										"gorest",
										"co",
										"in"
									],
									"path": [
										"public",
										"v2",
										"users"
									]
								}
							},
							"status": "Created",
							"code": 201,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Date",
									"value": "Wed, 02 Oct 2024 08:30:06 GMT"
								},
								{
									"key": "Content-Type",
									"value": "application/json; charset=utf-8"
								},
								{
									"key": "Content-Length",
									"value": "105"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								},
								{
									"key": "Cache-Control",
									"value": "max-age=0, private, must-revalidate"
								},
								{
									"key": "etag",
									"value": "W/\"95e8934f96d0335a0b807f5b59f84dc5\""
								},
								{
									"key": "location",
									"value": "https://gorest.co.in/public/v2/users/7441656"
								},
								{
									"key": "referrer-policy",
									"value": "strict-origin-when-cross-origin"
								},
								{
									"key": "vary",
									"value": "Origin"
								},
								{
									"key": "x-content-type-options",
									"value": "nosniff"
								},
								{
									"key": "x-download-options",
									"value": "noopen"
								},
								{
									"key": "x-frame-options",
									"value": "SAMEORIGIN"
								},
								{
									"key": "x-permitted-cross-domain-policies",
									"value": "none"
								},
								{
									"key": "x-ratelimit-limit",
									"value": "90"
								},
								{
									"key": "x-ratelimit-remaining",
									"value": "89"
								},
								{
									"key": "x-ratelimit-reset",
									"value": "1"
								},
								{
									"key": "x-request-id",
									"value": "c391036a-ff10-4877-b141-a09d4287b54a"
								},
								{
									"key": "x-runtime",
									"value": "0.089555"
								},
								{
									"key": "x-xss-protection",
									"value": "0"
								},
								{
									"key": "CF-Cache-Status",
									"value": "DYNAMIC"
								},
								{
									"key": "Report-To",
									"value": "{\"endpoints\":[{\"url\":\"https:\\/\\/a.nel.cloudflare.com\\/report\\/v4?s=BC16qgqhTVN3usHTgICfV4ERDqj1dFS1SM4QZiq%2FMaGlTUlzYUcUSLG01NjmAnhtNJsBu9Su30nGo3NrvDB4Cdimv6kBCy3PmZ3YlHWq59WzjpHQ36b5TaPciNGtjlQ%3D\"}],\"group\":\"cf-nel\",\"max_age\":604800}"
								},
								{
									"key": "NEL",
									"value": "{\"success_fraction\":0,\"report_to\":\"cf-nel\",\"max_age\":604800}"
								},
								{
									"key": "Server",
									"value": "cloudflare"
								},
								{
									"key": "CF-RAY",
									"value": "8cc3541bd83a6f93-CDG"
								}
							],
							"cookie": [],
							"body": "{\n    \"id\": 7441656,\n    \"name\": \"Wisdom Erhabor\",\n    \"email\": \"wisdomochus1@gmail.com\",\n    \"gender\": \"male\",\n    \"status\": \"active\"\n}"
						}
					]
				},
				{
					"name": "Update user",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Update User - Verify response code is 200 OK\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"    pm.response.to.have.status(\"OK\");\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 5 seconds\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(5000);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify if the response body is received from server\", function () {\r",
									"    pm.response.to.have.body();\r",
									"});\r",
									"\r",
									"pm.test(\"Verify if the response header Content-Type=application/json\", function () {\r",
									"    pm.response.to.have.header(\"Content-Type\",\"application/json; charset=utf-8\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify if the response body contains fields such as id, name, email, gender, status\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"id\");\r",
									"    pm.expect(pm.response.text()).to.include(\"name\");\r",
									"    pm.expect(pm.response.text()).to.include(\"email\");\r",
									"    pm.expect(pm.response.text()).to.include(\"gender\");\r",
									"    pm.expect(pm.response.text()).to.include(\"status\");\r",
									"});\r",
									"\r",
									"pm.test(\"Successful POST request => Verify if gender is [male or female]\", function () {\r",
									"    pm.expect(pm.response.json().gender).to.be.oneOf([\"male\", \"female\"]);\r",
									"});\r",
									"\r",
									"pm.test(\"Successful POST request => Verify if status is [active, or inactive]\", function () {\r",
									"    pm.expect(pm.response.json().status).to.be.oneOf([\"active\", \"inactive\"]);\r",
									"});\r",
									"\r",
									"/*\r",
									"\r",
									"pm.test(\"JSON Value/key Check ==> Verify if name was updated to :Wisdom Erhabor\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.name).to.eql(\"Wisdom Erhabor\");\r",
									"});\r",
									"\r",
									"pm.test(\"JSON Value/key Check ==> Verify if email is  :wisdomochus1@gmail.com\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.email).to.eql(\"wisdomochus1@gmail.com\");\r",
									"});\r",
									"\r",
									"pm.test(\"JSON Value/key Check ==> Verify if name was updated to :Wisdom Erhabor and email is  :wisdomochus1@gmail.com\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.name).to.eql(\"Wisdom Erhabor\");\r",
									"    pm.expect(jsonData.email).to.eql(\"wisdomochus1@gmail.com\");\r",
									"});\r",
									"\r",
									"*/\r",
									"\r",
									"// CAPTURE THE RESPONSE ATTRIBUTES\r",
									"\r",
									"//pm.response.code\r",
									"\r",
									"console.log(\"Hello World!\");\r",
									"\r",
									"console.log(pm.response.code);\r",
									"\r",
									"console.log(\"The response code received from server is :\"+pm.response.code);\r",
									"console.log(\"The response message received from server is :\"+pm.response.status);\r",
									"console.log(\"The response time received from server is :\"+pm.response.responseTime+ \" milliseconds\");\r",
									"\r",
									"console.log(\"The response body size received from server is :\");\r",
									"console.log(pm.response.size());\r",
									"console.log(\"The response body (JSON) received from server is :\");\r",
									"console.log(pm.response.json());  // text() body\r",
									"console.log(\"The response body (text) received from server is :\");\r",
									"console.log(pm.response.text());\r",
									"\r",
									"console.log(\"The response headers received from server are :\"+pm.response.headers);\r",
									"\r",
									"// CAPTURE THE REQUEST ATTRIBUTEES\r",
									"\r",
									"console.log(\"The HTTP method used in this API is: \"+pm.request.method);\r",
									"console.log(\"The API URL used in this API is: \"+pm.request.url);\r",
									"console.log(\"The request headers used in this API are: \"+pm.request.headers);\r",
									"console.log(\"The request payload is: \");\r",
									"console.log(pm.request.body);\r",
									"console.log(\"The request size is: \");\r",
									"console.log(pm.request.size());\r",
									"console.log(\"The request name is : \"+pm.info.requestName);\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {
							"user-agent": true
						}
					},
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer 5582f007d8a190ac92d47850fc3ccb4dc14c96e0de5bf83db58270734a7952fe"
							},
							{
								"key": "User-Agent",
								"value": "{{$randomUserAgent}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\": \"{{$randomNamePrefix}} {{globalName}}\",\r\n    \"email\": \"{{globalEmail}}\",\r\n    \"status\": \"inactive\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://gorest.co.in/public/v2/users/{{globalID}}",
							"protocol": "https",
							"host": [
								"gorest",
								"co",
								"in"
							],
							"path": [
								"public",
								"v2",
								"users",
								"{{globalID}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "List users API",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"List Users - Verify response code is 200 OK\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"    pm.response.to.have.status(\"OK\");\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 5 seconds\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(5000);\r",
									"});\r",
									"\r",
									"pm.test.skip(\"Verify the response body string received from server\", function () {\r",
									"    pm.response.to.have.body(\"response_body_string\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify if the response body is received from server\", function () {\r",
									"    pm.response.to.have.body();\r",
									"});\r",
									"\r",
									"pm.test(\"Verify if the response header Content-Type=application/json\", function () {\r",
									"    pm.response.to.have.header(\"Content-Type\",\"application/json; charset=utf-8\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify if the response body contains fields such as id, name, email, gender, status\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"id\");\r",
									"    pm.expect(pm.response.text()).to.include(\"name\");\r",
									"    pm.expect(pm.response.text()).to.include(\"email\");\r",
									"    pm.expect(pm.response.text()).to.include(\"gender\");\r",
									"    pm.expect(pm.response.text()).to.include(\"status\");\r",
									"});\r",
									"pm.test(\"Response body has valid Content-Type header\", function () {\r",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {
							"user-agent": true
						}
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "5582f007d8a190ac92d47850fc3ccb4dc14c96e0de5bf83db58270734a7952fe",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer ACCESS-TOKEN"
							},
							{
								"key": "User-Agent",
								"value": "{{$randomUserAgent}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "https://gorest.co.in/public/v2/users",
							"protocol": "https",
							"host": [
								"gorest",
								"co",
								"in"
							],
							"path": [
								"public",
								"v2",
								"users"
							]
						},
						"description": "### Get Users\n\nThis endpoint sends an HTTP GET request to retrieve a list of users from the server.\n\n**Request Body**  \nThis request does not require a request body.\n\n**Response**  \nThe response will include an array of user objects, where each object contains the following fields:\n\n- `id` (number): The unique identifier for the user.\n    \n- `name` (string): The name of the user.\n    \n- `email` (string): The email address of the user.\n    \n- `gender` (string): The gender of the user.\n    \n- `status` (string): The status of the user.\n    \n\nExample response:\n\n``` json\n[\n    {\n        \"id\": 0,\n        \"name\": \"\",\n        \"email\": \"\",\n        \"gender\": \"\",\n        \"status\": \"\"\n    }\n]\n\n ```"
					},
					"response": [
						{
							"name": "List users API",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer ACCESS-TOKEN"
									}
								],
								"url": {
									"raw": "https://gorest.co.in/public/v2/users",
									"protocol": "https",
									"host": [
										"gorest",
										"co",
										"in"
									],
									"path": [
										"public",
										"v2",
										"users"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Date",
									"value": "Wed, 02 Oct 2024 08:46:17 GMT"
								},
								{
									"key": "Content-Type",
									"value": "application/json; charset=utf-8"
								},
								{
									"key": "Transfer-Encoding",
									"value": "chunked"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								},
								{
									"key": "Cache-Control",
									"value": "max-age=0, private, must-revalidate"
								},
								{
									"key": "etag",
									"value": "W/\"04d4ce1780d4f5f061d94e088cb66ca5\""
								},
								{
									"key": "referrer-policy",
									"value": "strict-origin-when-cross-origin"
								},
								{
									"key": "vary",
									"value": "Origin"
								},
								{
									"key": "x-content-type-options",
									"value": "nosniff"
								},
								{
									"key": "x-download-options",
									"value": "noopen"
								},
								{
									"key": "x-frame-options",
									"value": "SAMEORIGIN"
								},
								{
									"key": "x-links-current",
									"value": "https://gorest.co.in/public/v2/users?page=1"
								},
								{
									"key": "x-links-next",
									"value": "https://gorest.co.in/public/v2/users?page=2"
								},
								{
									"key": "x-links-previous",
									"value": ""
								},
								{
									"key": "x-pagination-limit",
									"value": "10"
								},
								{
									"key": "x-pagination-page",
									"value": "1"
								},
								{
									"key": "x-pagination-pages",
									"value": "289"
								},
								{
									"key": "x-pagination-total",
									"value": "2887"
								},
								{
									"key": "x-permitted-cross-domain-policies",
									"value": "none"
								},
								{
									"key": "x-ratelimit-limit",
									"value": "90"
								},
								{
									"key": "x-ratelimit-remaining",
									"value": "89"
								},
								{
									"key": "x-ratelimit-reset",
									"value": "1"
								},
								{
									"key": "x-request-id",
									"value": "a5dfca49-563f-49a2-9e59-02a0326faea8"
								},
								{
									"key": "x-runtime",
									"value": "0.062732"
								},
								{
									"key": "x-xss-protection",
									"value": "0"
								},
								{
									"key": "CF-Cache-Status",
									"value": "DYNAMIC"
								},
								{
									"key": "Report-To",
									"value": "{\"endpoints\":[{\"url\":\"https:\\/\\/a.nel.cloudflare.com\\/report\\/v4?s=ECV%2F1Q6OgJ2HCf8KpmDWhc%2BadUB%2BjjlYiq9eVGvh833YrQc6YycSnYAV39%2BRX8UPSHVRQYhZkKo%2FpIcjyEFmDnVNRFCifJxRRiCxAtQztFJg8MnaXy7i0PifU2hXHtk%3D\"}],\"group\":\"cf-nel\",\"max_age\":604800}"
								},
								{
									"key": "NEL",
									"value": "{\"success_fraction\":0,\"report_to\":\"cf-nel\",\"max_age\":604800}"
								},
								{
									"key": "Server",
									"value": "cloudflare"
								},
								{
									"key": "CF-RAY",
									"value": "8cc36bcbbe88d3dc-CDG"
								},
								{
									"key": "Content-Encoding",
									"value": "br"
								}
							],
							"cookie": [],
							"body": "[\n    {\n        \"id\": 7441656,\n        \"name\": \"Wisdom O. Erhabor\",\n        \"email\": \"wisdomochus1@gmail.com\",\n        \"gender\": \"male\",\n        \"status\": \"active\"\n    },\n    {\n        \"id\": 7441372,\n        \"name\": \"Maheswar Nair\",\n        \"email\": \"maheswar_nair@morar.example\",\n        \"gender\": \"male\",\n        \"status\": \"inactive\"\n    },\n    {\n        \"id\": 7441370,\n        \"name\": \"Dhanalakshmi Kaul\",\n        \"email\": \"kaul_dhanalakshmi@casper-kemmer.example\",\n        \"gender\": \"female\",\n        \"status\": \"active\"\n    },\n    {\n        \"id\": 7441369,\n        \"name\": \"Udit Singh DDS\",\n        \"email\": \"udit_singh_dds@casper.test\",\n        \"gender\": \"female\",\n        \"status\": \"inactive\"\n    },\n    {\n        \"id\": 7441368,\n        \"name\": \"Rev. Atmanand Khanna\",\n        \"email\": \"khanna_rev_atmanand@smith.example\",\n        \"gender\": \"female\",\n        \"status\": \"active\"\n    },\n    {\n        \"id\": 7441367,\n        \"name\": \"Charak Adiga\",\n        \"email\": \"adiga_charak@erdman.example\",\n        \"gender\": \"male\",\n        \"status\": \"inactive\"\n    },\n    {\n        \"id\": 7441366,\n        \"name\": \"Somnath Rana\",\n        \"email\": \"somnath_rana@morar-kiehn.example\",\n        \"gender\": \"male\",\n        \"status\": \"active\"\n    },\n    {\n        \"id\": 7440593,\n        \"name\": \"Girja Dutta Esq.\",\n        \"email\": \"esq_girja_dutta@mueller.test\",\n        \"gender\": \"female\",\n        \"status\": \"active\"\n    },\n    {\n        \"id\": 7440592,\n        \"name\": \"Pres. Deeptimay Abbott\",\n        \"email\": \"abbott_pres_deeptimay@haley.test\",\n        \"gender\": \"female\",\n        \"status\": \"inactive\"\n    },\n    {\n        \"id\": 7440591,\n        \"name\": \"Chidambaram Dutta\",\n        \"email\": \"dutta_chidambaram@flatley-ebert.example\",\n        \"gender\": \"male\",\n        \"status\": \"inactive\"\n    }\n]"
						}
					]
				},
				{
					"name": "Delete user",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Delete User - Verify response code is 204 No Content\", function () {\r",
									"    pm.response.to.have.status(204);\r",
									"    pm.response.to.have.status(\"No Content\");\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 5 seconds\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(5000);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify if the response body is not received from server\", function () {\r",
									"    pm.response.to.not.have.body();\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {
							"user-agent": true
						}
					},
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer 5582f007d8a190ac92d47850fc3ccb4dc14c96e0de5bf83db58270734a7952fe"
							},
							{
								"key": "User-Agent",
								"value": "{{$randomUserAgent}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "https://gorest.co.in/public/v2/users/{{globalID}}",
							"protocol": "https",
							"host": [
								"gorest",
								"co",
								"in"
							],
							"path": [
								"public",
								"v2",
								"users",
								"{{globalID}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "List users API Copy",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"List Users - Verify response code is 200 OK\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"    pm.response.to.have.status(\"OK\");\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 5 seconds\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(5000);\r",
									"});\r",
									"\r",
									"pm.test.skip(\"Verify the response body string received from server\", function () {\r",
									"    pm.response.to.have.body(\"response_body_string\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify if the response body is received from server\", function () {\r",
									"    pm.response.to.have.body();\r",
									"});\r",
									"\r",
									"pm.test(\"Verify if the response header Content-Type=application/json\", function () {\r",
									"    pm.response.to.have.header(\"Content-Type\",\"application/json; charset=utf-8\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify if the response body contains fields such as id, name, email, gender, status\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"id\");\r",
									"    pm.expect(pm.response.text()).to.include(\"name\");\r",
									"    pm.expect(pm.response.text()).to.include(\"email\");\r",
									"    pm.expect(pm.response.text()).to.include(\"gender\");\r",
									"    pm.expect(pm.response.text()).to.include(\"status\");\r",
									"});\r",
									"pm.test(\"Response body has valid Content-Type header\", function () {\r",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {
							"user-agent": true
						}
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "5582f007d8a190ac92d47850fc3ccb4dc14c96e0de5bf83db58270734a7952fe",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer ACCESS-TOKEN"
							},
							{
								"key": "User-Agent",
								"value": "{{$randomUserAgent}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "https://gorest.co.in/public/v2/users",
							"protocol": "https",
							"host": [
								"gorest",
								"co",
								"in"
							],
							"path": [
								"public",
								"v2",
								"users"
							]
						},
						"description": "### Get Users\n\nThis endpoint sends an HTTP GET request to retrieve a list of users from the server.\n\n**Request Body**  \nThis request does not require a request body.\n\n**Response**  \nThe response will include an array of user objects, where each object contains the following fields:\n\n- `id` (number): The unique identifier for the user.\n    \n- `name` (string): The name of the user.\n    \n- `email` (string): The email address of the user.\n    \n- `gender` (string): The gender of the user.\n    \n- `status` (string): The status of the user.\n    \n\nExample response:\n\n``` json\n[\n    {\n        \"id\": 0,\n        \"name\": \"\",\n        \"email\": \"\",\n        \"gender\": \"\",\n        \"status\": \"\"\n    }\n]\n\n ```"
					},
					"response": [
						{
							"name": "List users API",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer ACCESS-TOKEN"
									}
								],
								"url": {
									"raw": "https://gorest.co.in/public/v2/users",
									"protocol": "https",
									"host": [
										"gorest",
										"co",
										"in"
									],
									"path": [
										"public",
										"v2",
										"users"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Date",
									"value": "Wed, 02 Oct 2024 08:46:17 GMT"
								},
								{
									"key": "Content-Type",
									"value": "application/json; charset=utf-8"
								},
								{
									"key": "Transfer-Encoding",
									"value": "chunked"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								},
								{
									"key": "Cache-Control",
									"value": "max-age=0, private, must-revalidate"
								},
								{
									"key": "etag",
									"value": "W/\"04d4ce1780d4f5f061d94e088cb66ca5\""
								},
								{
									"key": "referrer-policy",
									"value": "strict-origin-when-cross-origin"
								},
								{
									"key": "vary",
									"value": "Origin"
								},
								{
									"key": "x-content-type-options",
									"value": "nosniff"
								},
								{
									"key": "x-download-options",
									"value": "noopen"
								},
								{
									"key": "x-frame-options",
									"value": "SAMEORIGIN"
								},
								{
									"key": "x-links-current",
									"value": "https://gorest.co.in/public/v2/users?page=1"
								},
								{
									"key": "x-links-next",
									"value": "https://gorest.co.in/public/v2/users?page=2"
								},
								{
									"key": "x-links-previous",
									"value": ""
								},
								{
									"key": "x-pagination-limit",
									"value": "10"
								},
								{
									"key": "x-pagination-page",
									"value": "1"
								},
								{
									"key": "x-pagination-pages",
									"value": "289"
								},
								{
									"key": "x-pagination-total",
									"value": "2887"
								},
								{
									"key": "x-permitted-cross-domain-policies",
									"value": "none"
								},
								{
									"key": "x-ratelimit-limit",
									"value": "90"
								},
								{
									"key": "x-ratelimit-remaining",
									"value": "89"
								},
								{
									"key": "x-ratelimit-reset",
									"value": "1"
								},
								{
									"key": "x-request-id",
									"value": "a5dfca49-563f-49a2-9e59-02a0326faea8"
								},
								{
									"key": "x-runtime",
									"value": "0.062732"
								},
								{
									"key": "x-xss-protection",
									"value": "0"
								},
								{
									"key": "CF-Cache-Status",
									"value": "DYNAMIC"
								},
								{
									"key": "Report-To",
									"value": "{\"endpoints\":[{\"url\":\"https:\\/\\/a.nel.cloudflare.com\\/report\\/v4?s=ECV%2F1Q6OgJ2HCf8KpmDWhc%2BadUB%2BjjlYiq9eVGvh833YrQc6YycSnYAV39%2BRX8UPSHVRQYhZkKo%2FpIcjyEFmDnVNRFCifJxRRiCxAtQztFJg8MnaXy7i0PifU2hXHtk%3D\"}],\"group\":\"cf-nel\",\"max_age\":604800}"
								},
								{
									"key": "NEL",
									"value": "{\"success_fraction\":0,\"report_to\":\"cf-nel\",\"max_age\":604800}"
								},
								{
									"key": "Server",
									"value": "cloudflare"
								},
								{
									"key": "CF-RAY",
									"value": "8cc36bcbbe88d3dc-CDG"
								},
								{
									"key": "Content-Encoding",
									"value": "br"
								}
							],
							"cookie": [],
							"body": "[\n    {\n        \"id\": 7441656,\n        \"name\": \"Wisdom O. Erhabor\",\n        \"email\": \"wisdomochus1@gmail.com\",\n        \"gender\": \"male\",\n        \"status\": \"active\"\n    },\n    {\n        \"id\": 7441372,\n        \"name\": \"Maheswar Nair\",\n        \"email\": \"maheswar_nair@morar.example\",\n        \"gender\": \"male\",\n        \"status\": \"inactive\"\n    },\n    {\n        \"id\": 7441370,\n        \"name\": \"Dhanalakshmi Kaul\",\n        \"email\": \"kaul_dhanalakshmi@casper-kemmer.example\",\n        \"gender\": \"female\",\n        \"status\": \"active\"\n    },\n    {\n        \"id\": 7441369,\n        \"name\": \"Udit Singh DDS\",\n        \"email\": \"udit_singh_dds@casper.test\",\n        \"gender\": \"female\",\n        \"status\": \"inactive\"\n    },\n    {\n        \"id\": 7441368,\n        \"name\": \"Rev. Atmanand Khanna\",\n        \"email\": \"khanna_rev_atmanand@smith.example\",\n        \"gender\": \"female\",\n        \"status\": \"active\"\n    },\n    {\n        \"id\": 7441367,\n        \"name\": \"Charak Adiga\",\n        \"email\": \"adiga_charak@erdman.example\",\n        \"gender\": \"male\",\n        \"status\": \"inactive\"\n    },\n    {\n        \"id\": 7441366,\n        \"name\": \"Somnath Rana\",\n        \"email\": \"somnath_rana@morar-kiehn.example\",\n        \"gender\": \"male\",\n        \"status\": \"active\"\n    },\n    {\n        \"id\": 7440593,\n        \"name\": \"Girja Dutta Esq.\",\n        \"email\": \"esq_girja_dutta@mueller.test\",\n        \"gender\": \"female\",\n        \"status\": \"active\"\n    },\n    {\n        \"id\": 7440592,\n        \"name\": \"Pres. Deeptimay Abbott\",\n        \"email\": \"abbott_pres_deeptimay@haley.test\",\n        \"gender\": \"female\",\n        \"status\": \"inactive\"\n    },\n    {\n        \"id\": 7440591,\n        \"name\": \"Chidambaram Dutta\",\n        \"email\": \"dutta_chidambaram@flatley-ebert.example\",\n        \"gender\": \"male\",\n        \"status\": \"inactive\"\n    }\n]"
						}
					]
				}
			],
			"description": "API CHAINING AUTOMATION → Extracting the response of an API and supplying it as request to another API\n\n(i) Extract the response of the main API and store it in a variable  \n(ii) Extract the required field(s) and store them in variable(s)  \n(iii) Convert local variables to global variables  \n(iv) Refer the global variables in other dependent APIs"
		},
		{
			"name": "E2E API AUTOMATION",
			"item": [
				{
					"name": "CREATE A USER",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Create User - Verify response code is 201 Created\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"    pm.response.to.have.status(\"Created\");\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 5 seconds\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(5000);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify if the response body is received from server\", function () {\r",
									"    pm.response.to.have.body();\r",
									"});\r",
									"\r",
									"pm.test(\"Verify if the response header Content-Type=application/json\", function () {\r",
									"    pm.response.to.have.header(\"Content-Type\",\"application/json; charset=utf-8\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify if the response body contains fields such as id, name, email, gender, status\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"id\");\r",
									"    pm.expect(pm.response.text()).to.include(\"name\");\r",
									"    pm.expect(pm.response.text()).to.include(\"email\");\r",
									"    pm.expect(pm.response.text()).to.include(\"gender\");\r",
									"    pm.expect(pm.response.text()).to.include(\"status\");\r",
									"});\r",
									"\r",
									"pm.test(\"Successful POST request => Verify if gender is [male or female]\", function () {\r",
									"    pm.expect(pm.response.json().gender).to.be.oneOf([\"male\", \"female\"]);\r",
									"});\r",
									"\r",
									"pm.test(\"Successful POST request => Verify if status is [active, or inactive]\", function () {\r",
									"    pm.expect(pm.response.json().status).to.be.oneOf([\"active\", \"inactive\"]);\r",
									"});\r",
									"//\r",
									"//\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"// API CHAINING CODE //\r",
									"\r",
									"// 1. Extract the response of the API and store it in a local variable\r",
									"\r",
									"var jsonData = pm.response.json();\r",
									"\r",
									"// 2. Extract the required field(s) and store it in a local variable\r",
									"\r",
									"var extractedID = jsonData.id;\r",
									"var extractedName = jsonData.name;\r",
									"var extractedEmail = jsonData.email;\r",
									"var extractedStatus = jsonData.status;\r",
									"\r",
									"//3. Convert local variable to global variables using the snippets\r",
									"\r",
									"pm.globals.set(\"globalID\", extractedID);\r",
									"pm.globals.set(\"globalName\", extractedName);\r",
									"pm.globals.set(\"globalEmail\", extractedEmail);\r",
									"pm.globals.set(\"globalStatus\", extractedStatus);\r",
									"\r",
									"\r",
									"\r",
									"// CONDICTIONAL STATEMENTS / POSTMAN WORKFLOWS\r",
									"\r",
									"if (pm.response.code == 201) {\r",
									"    console.log(\"The '\"+pm.info.requestName+\"' API has passed\");\r",
									"    pm.execution.setNextRequest(\"VALIDATE IF USER IS CREATED\");\r",
									"    // Execute the API with the specified name\r",
									"} else {\r",
									"    console.log(\"The '\"+pm.info.requestName+\"' API has failed\");\r",
									"    pm.execution.setNextRequest(\"\"); // Stop test execution\r",
									"}\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {
							"user-agent": true
						}
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer 5582f007d8a190ac92d47850fc3ccb4dc14c96e0de5bf83db58270734a7952fe"
							},
							{
								"key": "User-Agent",
								"value": "{{$randomUserAgent}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\": \"{{$randomFullName}}\",\r\n    \"gender\": \"male\",                  // \"{{gender}}\", // This data comes from the csv file\r\n    \"email\": \"{{$randomEmail}}\",\r\n    \"status\": \"active\"             //     \"{{status}}\" // This data comes from the csv file\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://gorest.co.in/public/v2/users",
							"protocol": "https",
							"host": [
								"gorest",
								"co",
								"in"
							],
							"path": [
								"public",
								"v2",
								"users"
							]
						},
						"description": "### Add New User\n\nThis endpoint allows you to add a new user to the system.\n\n#### Request Body\n\n- `name` (string, required): The name of the user.\n    \n- `gender` (string, required): The gender of the user.\n    \n- `email` (string, required): The email address of the user.\n    \n- `status` (string, required): The status of the user.\n    \n\n#### Response\n\nUpon successful creation, the endpoint returns the details of the newly created user including:\n\n- `id` (integer): The unique identifier of the user.\n    \n- `name` (string): The name of the user.\n    \n- `email` (string): The email address of the user.\n    \n- `gender` (string): The gender of the user.\n    \n- `status` (string): The status of the user.\n    \n\nExample Response:\n\n``` json\n{\n    \"id\": 0,\n    \"name\": \"\",\n    \"email\": \"\",\n    \"gender\": \"\",\n    \"status\": \"\"\n}\n\n ```"
					},
					"response": []
				},
				{
					"name": "VALIDATE IF USER IS CREATED",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"List Users - Verify response code is 200 OK\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"    pm.response.to.have.status(\"OK\");\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 5 seconds\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(5000);\r",
									"});\r",
									"\r",
									"pm.test.skip(\"Verify the response body string received from server\", function () {\r",
									"    pm.response.to.have.body(\"response_body_string\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify if the response body is received from server\", function () {\r",
									"    pm.response.to.have.body();\r",
									"});\r",
									"\r",
									"pm.test(\"Verify if the response header Content-Type=application/json\", function () {\r",
									"    pm.response.to.have.header(\"Content-Type\",\"application/json; charset=utf-8\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify if the response body contains fields such as id, name, email, gender, status\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"id\");\r",
									"    pm.expect(pm.response.text()).to.include(\"name\");\r",
									"    pm.expect(pm.response.text()).to.include(\"email\");\r",
									"    pm.expect(pm.response.text()).to.include(\"gender\");\r",
									"    pm.expect(pm.response.text()).to.include(\"status\");\r",
									"});\r",
									"pm.test(\"Response body has valid Content-Type header\", function () {\r",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
									"});\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"// VERIFY IF SPECIFIC USER IS CREATED using JSON Value\r",
									"\r",
									"//The new id is present at index zero\r",
									"\r",
									"/*\r",
									"pm.test(\"Your test name\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.value).to.eql(100);\r",
									"});\r",
									"\r",
									"pm.globals.get(\"variable_key\");\r",
									"*/\r",
									"\r",
									"pm.test(\"Verify if user is created successfully with id = \" +pm.globals.get(\"globalID\"), function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData[0].id).to.eql(pm.globals.get(\"globalID\"));\r",
									"}); // when array [] index is 0 value is \"globalID\"\r",
									"\r",
									"\r",
									"\r",
									"// CONDICTIONAL STATEMENTS / POSTMAN WORKFLOWS\r",
									"\r",
									"if (pm.response.code == 200) {\r",
									"    console.log(\"The '\"+pm.info.requestName+\"' API has passed\");\r",
									"    pm.execution.setNextRequest(\"UPDATE THIS CREATED USER\");\r",
									"    // Execute the API with the specified name\r",
									"} else {\r",
									"    console.log(\"The '\"+pm.info.requestName+\"' API has failed\");\r",
									"    pm.execution.setNextRequest(\"\"); // Stop test execution\r",
									"}\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {
							"user-agent": true
						}
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "5582f007d8a190ac92d47850fc3ccb4dc14c96e0de5bf83db58270734a7952fe",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer ACCESS-TOKEN"
							},
							{
								"key": "User-Agent",
								"value": "{{$randomUserAgent}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "https://gorest.co.in/public/v2/users",
							"protocol": "https",
							"host": [
								"gorest",
								"co",
								"in"
							],
							"path": [
								"public",
								"v2",
								"users"
							]
						},
						"description": "### Get Users\n\nThis endpoint sends an HTTP GET request to retrieve a list of users from the server.\n\n**Request Body**  \nThis request does not require a request body.\n\n**Response**  \nThe response will include an array of user objects, where each object contains the following fields:\n\n- `id` (number): The unique identifier for the user.\n    \n- `name` (string): The name of the user.\n    \n- `email` (string): The email address of the user.\n    \n- `gender` (string): The gender of the user.\n    \n- `status` (string): The status of the user.\n    \n\nExample response:\n\n``` json\n[\n    {\n        \"id\": 0,\n        \"name\": \"\",\n        \"email\": \"\",\n        \"gender\": \"\",\n        \"status\": \"\"\n    }\n]\n\n ```"
					},
					"response": []
				},
				{
					"name": "UPDATE THIS CREATED USER",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Update User - Verify response code is 200 OK\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"    pm.response.to.have.status(\"OK\");\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 5 seconds\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(5000);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify if the response body is received from server\", function () {\r",
									"    pm.response.to.have.body();\r",
									"});\r",
									"\r",
									"pm.test(\"Verify if the response header Content-Type=application/json\", function () {\r",
									"    pm.response.to.have.header(\"Content-Type\",\"application/json; charset=utf-8\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify if the response body contains fields such as id, name, email, gender, status\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"id\");\r",
									"    pm.expect(pm.response.text()).to.include(\"name\");\r",
									"    pm.expect(pm.response.text()).to.include(\"email\");\r",
									"    pm.expect(pm.response.text()).to.include(\"gender\");\r",
									"    pm.expect(pm.response.text()).to.include(\"status\");\r",
									"});\r",
									"\r",
									"pm.test(\"Successful POST request => Verify if gender is [male or female]\", function () {\r",
									"    pm.expect(pm.response.json().gender).to.be.oneOf([\"male\", \"female\"]);\r",
									"});\r",
									"\r",
									"pm.test(\"Successful POST request => Verify if status is [active, or inactive]\", function () {\r",
									"    pm.expect(pm.response.json().status).to.be.oneOf([\"active\", \"inactive\"]);\r",
									"});\r",
									"\r",
									"/*\r",
									"\r",
									"pm.test(\"JSON Value/key Check ==> Verify if name was updated to :Wisdom Erhabor\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.name).to.eql(\"Wisdom Erhabor\");\r",
									"});\r",
									"\r",
									"pm.test(\"JSON Value/key Check ==> Verify if email is  :wisdomochus1@gmail.com\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.email).to.eql(\"wisdomochus1@gmail.com\");\r",
									"});\r",
									"\r",
									"pm.test(\"JSON Value/key Check ==> Verify if name was updated to :Wisdom Erhabor and email is  :wisdomochus1@gmail.com\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.name).to.eql(\"Wisdom Erhabor\");\r",
									"    pm.expect(jsonData.email).to.eql(\"wisdomochus1@gmail.com\");\r",
									"});\r",
									"\r",
									"*/\r",
									"\r",
									"\r",
									"pm.test(\"Verify if user with id = \" +pm.globals.get(\"globalID\") + \" is updated successfully\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.id).to.eql(pm.globals.get(\"globalID\"));\r",
									"}); // when index is 0 value is \"globalID\"\r",
									"\r",
									"\r",
									"// API CHAINING CODE //\r",
									"\r",
									"// 1. Extract the response of the API and store it in a local variable\r",
									"\r",
									"var jsonData = pm.response.json();\r",
									"\r",
									"// 2. Extract the required field(s) and store it in a local variable\r",
									"\r",
									"var extractedUpdatedName = jsonData.name;\r",
									"\r",
									"\r",
									"//3. Convert local variable to global variables using the snippets\r",
									"\r",
									"pm.globals.set(\"globalUpdatedName\", extractedUpdatedName);\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"// CAPTURE THE RESPONSE ATTRIBUTES\r",
									"\r",
									"//pm.response.code\r",
									"\r",
									"console.log(\"Hello World!\");\r",
									"\r",
									"console.log(pm.response.code);\r",
									"\r",
									"console.log(\"The response code received from server is :\"+pm.response.code);\r",
									"console.log(\"The response message received from server is :\"+pm.response.status);\r",
									"console.log(\"The response time received from server is :\"+pm.response.responseTime+ \" milliseconds\");\r",
									"\r",
									"console.log(\"The response body size received from server is :\");\r",
									"console.log(pm.response.size());\r",
									"console.log(\"The response body (JSON) received from server is :\");\r",
									"console.log(pm.response.json());  // text() body\r",
									"console.log(\"The response body (text) received from server is :\");\r",
									"console.log(pm.response.text());\r",
									"\r",
									"console.log(\"The response headers received from server are :\"+pm.response.headers);\r",
									"\r",
									"// CAPTURE THE REQUEST ATTRIBUTEES\r",
									"\r",
									"console.log(\"The HTTP method used in this API is: \"+pm.request.method);\r",
									"console.log(\"The API URL used in this API is: \"+pm.request.url);\r",
									"console.log(\"The request headers used in this API are: \"+pm.request.headers);\r",
									"console.log(\"The request payload is: \");\r",
									"console.log(pm.request.body);\r",
									"console.log(\"The request size is: \");\r",
									"console.log(pm.request.size());\r",
									"console.log(\"The request name is : \"+pm.info.requestName);\r",
									"\r",
									"\r",
									"// CONDICTIONAL STATEMENTS / POSTMAN WORKFLOWS\r",
									"\r",
									"if (pm.response.code == 200) {\r",
									"    console.log(\"The '\"+pm.info.requestName+\"' API has passed\");\r",
									"    pm.execution.setNextRequest(\"VALIDATE IF USER IS UPDATED\");\r",
									"    // Execute the API with the specified name\r",
									"} else {\r",
									"    console.log(\"The '\"+pm.info.requestName+\"' API has failed\");\r",
									"    pm.execution.setNextRequest(\"\"); // Stop test execution\r",
									"}\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {
							"user-agent": true
						}
					},
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer 5582f007d8a190ac92d47850fc3ccb4dc14c96e0de5bf83db58270734a7952fe"
							},
							{
								"key": "User-Agent",
								"value": "{{$randomUserAgent}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\": \"{{$randomNamePrefix}} {{globalName}}\",\r\n    \"email\": \"{{globalEmail}}\",\r\n    \"status\": \"inactive\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://gorest.co.in/public/v2/users/{{globalID}}",
							"protocol": "https",
							"host": [
								"gorest",
								"co",
								"in"
							],
							"path": [
								"public",
								"v2",
								"users",
								"{{globalID}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "VALIDATE IF USER IS UPDATED",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"List Users - Verify response code is 200 OK\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"    pm.response.to.have.status(\"OK\");\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 5 seconds\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(5000);\r",
									"});\r",
									"\r",
									"pm.test.skip(\"Verify the response body string received from server\", function () {\r",
									"    pm.response.to.have.body(\"response_body_string\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify if the response body is received from server\", function () {\r",
									"    pm.response.to.have.body();\r",
									"});\r",
									"\r",
									"pm.test(\"Verify if the response header Content-Type=application/json\", function () {\r",
									"    pm.response.to.have.header(\"Content-Type\",\"application/json; charset=utf-8\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify if the response body contains fields such as id, name, email, gender, status\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"id\");\r",
									"    pm.expect(pm.response.text()).to.include(\"name\");\r",
									"    pm.expect(pm.response.text()).to.include(\"email\");\r",
									"    pm.expect(pm.response.text()).to.include(\"gender\");\r",
									"    pm.expect(pm.response.text()).to.include(\"status\");\r",
									"});\r",
									"pm.test(\"Response body has valid Content-Type header\", function () {\r",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Verify if user is updated successfully with name = \" +pm.globals.get(\"globalUpdatedName\"), function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData[0].name).to.eql(pm.globals.get(\"globalUpdatedName\"));\r",
									"}); // when array [] index is 0 value is \"globalUpdatedName\"\r",
									"\r",
									"\r",
									"\r",
									"// CONDICTIONAL STATEMENTS / POSTMAN WORKFLOWS\r",
									"\r",
									"if (pm.response.code == 200) {\r",
									"    console.log(\"The '\"+pm.info.requestName+\"' API has passed\");\r",
									"    pm.execution.setNextRequest(\"DELETE THIS UPDATED USER\");\r",
									"    // Execute the API with the specified name\r",
									"} else {\r",
									"    console.log(\"The '\"+pm.info.requestName+\"' API has failed\");\r",
									"    pm.execution.setNextRequest(\"\"); // Stop test execution\r",
									"}\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {
							"user-agent": true
						}
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "5582f007d8a190ac92d47850fc3ccb4dc14c96e0de5bf83db58270734a7952fe",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer ACCESS-TOKEN"
							},
							{
								"key": "User-Agent",
								"value": "{{$randomUserAgent}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "https://gorest.co.in/public/v2/users",
							"protocol": "https",
							"host": [
								"gorest",
								"co",
								"in"
							],
							"path": [
								"public",
								"v2",
								"users"
							]
						},
						"description": "### Get Users\n\nThis endpoint sends an HTTP GET request to retrieve a list of users from the server.\n\n**Request Body**  \nThis request does not require a request body.\n\n**Response**  \nThe response will include an array of user objects, where each object contains the following fields:\n\n- `id` (number): The unique identifier for the user.\n    \n- `name` (string): The name of the user.\n    \n- `email` (string): The email address of the user.\n    \n- `gender` (string): The gender of the user.\n    \n- `status` (string): The status of the user.\n    \n\nExample response:\n\n``` json\n[\n    {\n        \"id\": 0,\n        \"name\": \"\",\n        \"email\": \"\",\n        \"gender\": \"\",\n        \"status\": \"\"\n    }\n]\n\n ```"
					},
					"response": []
				},
				{
					"name": "DELETE THIS UPDATED USER",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Delete User - Verify response code is 204 No Content\", function () {\r",
									"    pm.response.to.have.status(204);\r",
									"    pm.response.to.have.status(\"No Content\");\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 5 seconds\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(5000);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify if the response body is not received from server\", function () {\r",
									"    pm.response.to.not.have.body();\r",
									"});\r",
									"\r",
									"\r",
									"// CONDICTIONAL STATEMENTS / POSTMAN WORKFLOWS\r",
									"\r",
									"if (pm.response.code == 204) {\r",
									"    console.log(\"The '\"+pm.info.requestName+\"' API has passed\");\r",
									"    pm.execution.setNextRequest(\"VALIDATE IF USER IS DELETED\");\r",
									"    // Execute the API with the specified name\r",
									"} else {\r",
									"    console.log(\"The '\"+pm.info.requestName+\"' API has failed\");\r",
									"    pm.execution.setNextRequest(\"\"); // Stop test execution\r",
									"}\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {
							"user-agent": true
						}
					},
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer 5582f007d8a190ac92d47850fc3ccb4dc14c96e0de5bf83db58270734a7952fe"
							},
							{
								"key": "User-Agent",
								"value": "{{$randomUserAgent}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "https://gorest.co.in/public/v2/users/{{globalID}}",
							"protocol": "https",
							"host": [
								"gorest",
								"co",
								"in"
							],
							"path": [
								"public",
								"v2",
								"users",
								"{{globalID}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "VALIDATE IF USER IS DELETED",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"List Users - Verify response code is 200 OK\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"    pm.response.to.have.status(\"OK\");\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 5 seconds\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(5000);\r",
									"});\r",
									"\r",
									"pm.test.skip(\"Verify the response body string received from server\", function () {\r",
									"    pm.response.to.have.body(\"response_body_string\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify if the response body is received from server\", function () {\r",
									"    pm.response.to.have.body();\r",
									"});\r",
									"\r",
									"pm.test(\"Verify if the response header Content-Type=application/json\", function () {\r",
									"    pm.response.to.have.header(\"Content-Type\",\"application/json; charset=utf-8\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify if the response body contains fields such as id, name, email, gender, status\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"id\");\r",
									"    pm.expect(pm.response.text()).to.include(\"name\");\r",
									"    pm.expect(pm.response.text()).to.include(\"email\");\r",
									"    pm.expect(pm.response.text()).to.include(\"gender\");\r",
									"    pm.expect(pm.response.text()).to.include(\"status\");\r",
									"});\r",
									"pm.test(\"Response body has valid Content-Type header\", function () {\r",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
									"});\r",
									"\r",
									"// /VALIDATE IF USER IS DELETED using Response Body Contains String Snippet\r",
									"\r",
									"pm.test(\"Verify if created user with id = \"+pm.globals.get(\"globalID\")+\" is deleted\", function () {\r",
									"    pm.expect(pm.response.text()).to.not.include(pm.globals.get(\"globalID\"));\r",
									"}); //to.not\r",
									"\r",
									"\r",
									"\r",
									"// CONDICTIONAL STATEMENTS / POSTMAN WORKFLOWS\r",
									"\r",
									"if (pm.response.code == 200) {\r",
									"    console.log(\"The '\"+pm.info.requestName+\"' API has passed\");\r",
									"    pm.execution.setNextRequest(\"\");\r",
									"    // Stop test execution\r",
									"} else {\r",
									"    console.log(\"The '\"+pm.info.requestName+\"' API has failed\");\r",
									"    pm.execution.setNextRequest(\"\"); // Stop test execution\r",
									"}\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {
							"user-agent": true
						}
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "5582f007d8a190ac92d47850fc3ccb4dc14c96e0de5bf83db58270734a7952fe",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer ACCESS-TOKEN"
							},
							{
								"key": "User-Agent",
								"value": "{{$randomUserAgent}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "https://gorest.co.in/public/v2/users",
							"protocol": "https",
							"host": [
								"gorest",
								"co",
								"in"
							],
							"path": [
								"public",
								"v2",
								"users"
							]
						},
						"description": "### Get Users\n\nThis endpoint sends an HTTP GET request to retrieve a list of users from the server.\n\n**Request Body**  \nThis request does not require a request body.\n\n**Response**  \nThe response will include an array of user objects, where each object contains the following fields:\n\n- `id` (number): The unique identifier for the user.\n    \n- `name` (string): The name of the user.\n    \n- `email` (string): The email address of the user.\n    \n- `gender` (string): The gender of the user.\n    \n- `status` (string): The status of the user.\n    \n\nExample response:\n\n``` json\n[\n    {\n        \"id\": 0,\n        \"name\": \"\",\n        \"email\": \"\",\n        \"gender\": \"\",\n        \"status\": \"\"\n    }\n]\n\n ```"
					},
					"response": []
				}
			],
			"description": "Here, the response of an API becomes the request for another dependent API\n\nCREATE A USER (POST) → VALIDATE IF USER  \nIS CREATED (GET) → UPDATE THIS CREATED USER (PATCH) → VALIDATE IF USER IS  \nUPDATED (GET) → DELETE THIS UPDATED USER (DELETE) → VALIDATE IF USER IS  \nDELETED (GET)"
		},
		{
			"name": "API CHAINING PERFORMANCE TEST",
			"item": [
				{
					"name": "Create user",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Create User - Verify response code is 201 Created\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"    pm.response.to.have.status(\"Created\");\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 5 seconds\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(5000);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify if the response body is received from server\", function () {\r",
									"    pm.response.to.have.body();\r",
									"});\r",
									"\r",
									"pm.test(\"Verify if the response header Content-Type=application/json\", function () {\r",
									"    pm.response.to.have.header(\"Content-Type\",\"application/json; charset=utf-8\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify if the response body contains fields such as id, name, email, gender, status\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"id\");\r",
									"    pm.expect(pm.response.text()).to.include(\"name\");\r",
									"    pm.expect(pm.response.text()).to.include(\"email\");\r",
									"    pm.expect(pm.response.text()).to.include(\"gender\");\r",
									"    pm.expect(pm.response.text()).to.include(\"status\");\r",
									"});\r",
									"\r",
									"pm.test(\"Successful POST request => Verify if gender is [male or female]\", function () {\r",
									"    pm.expect(pm.response.json().gender).to.be.oneOf([\"male\", \"female\"]);\r",
									"});\r",
									"\r",
									"pm.test(\"Successful POST request => Verify if status is [active, or inactive]\", function () {\r",
									"    pm.expect(pm.response.json().status).to.be.oneOf([\"active\", \"inactive\"]);\r",
									"});\r",
									"\r",
									"\r",
									"// API CHAINING CODE //\r",
									"\r",
									"// 1. Extract the response of the API and store it in a local variable\r",
									"\r",
									"var jsonBody = pm.response.json();\r",
									"\r",
									"// 2. Extract the required field(s) and store it in a local variable\r",
									"\r",
									"var extractedID = jsonBody.id;\r",
									"var extractedName = jsonBody.name;\r",
									"var extractedEmail = jsonBody.email;\r",
									"var extractedStatus = jsonBody.status;\r",
									"\r",
									"//3. Convert local variable to global variables using the snippets\r",
									"\r",
									"pm.globals.set(\"globalID\", extractedID);\r",
									"pm.globals.set(\"globalName\", extractedName);\r",
									"pm.globals.set(\"globalEmail\", extractedEmail);\r",
									"pm.globals.set(\"globalStatus\", extractedStatus);\r",
									"\r",
									"\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"//1.\r",
									"// Dynamically create the status options array\r",
									"let dynamicStatusOptionsArray = [\"Active\", \"Inactive\"]; // Example values\r",
									"\r",
									"// Set the collection variable\r",
									"pm.collectionVariables.set(\"statusOptions\", JSON.stringify(dynamicStatusOptionsArray));\r",
									"\r",
									"//2.\r",
									"// Retrieve the collection variable\r",
									"let statusArray = JSON.parse(pm.collectionVariables.get(\"statusOptions\"));\r",
									"\r",
									"// Select a random status\r",
									"let randomStatus = statusArray[Math.floor(Math.random() * statusArray.length)];\r",
									"\r",
									"// Set the selected status variable\r",
									"pm.collectionVariables.set(\"selectedStatus\", randomStatus);\r",
									"\r",
									"//Log the selected status to the console.\r",
									"console.log(\"Selected Status: \", randomStatus);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {
							"user-agent": true
						}
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer 5582f007d8a190ac92d47850fc3ccb4dc14c96e0de5bf83db58270734a7952fe"
							},
							{
								"key": "User-Agent",
								"value": "{{$randomUserAgent}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\": \"{{$randomFullName}}\",\r\n    \"gender\": \"male\",\r\n    \"email\": \"{{$randomEmail}}\",\r\n    \"status\": \"{{selectedStatus}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://gorest.co.in/public/v2/users",
							"protocol": "https",
							"host": [
								"gorest",
								"co",
								"in"
							],
							"path": [
								"public",
								"v2",
								"users"
							]
						},
						"description": "### Add New User\n\nThis endpoint allows you to add a new user to the system.\n\n#### Request Body\n\n- `name` (string, required): The name of the user.\n    \n- `gender` (string, required): The gender of the user.\n    \n- `email` (string, required): The email address of the user.\n    \n- `status` (string, required): The status of the user.\n    \n\n#### Response\n\nUpon successful creation, the endpoint returns the details of the newly created user including:\n\n- `id` (integer): The unique identifier of the user.\n    \n- `name` (string): The name of the user.\n    \n- `email` (string): The email address of the user.\n    \n- `gender` (string): The gender of the user.\n    \n- `status` (string): The status of the user.\n    \n\nExample Response:\n\n``` json\n{\n    \"id\": 0,\n    \"name\": \"\",\n    \"email\": \"\",\n    \"gender\": \"\",\n    \"status\": \"\"\n}\n\n ```"
					},
					"response": [
						{
							"name": "Create user",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer 5582f007d8a190ac92d47850fc3ccb4dc14c96e0de5bf83db58270734a7952fe"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"name\": \"Wisdom Erhabor\",\r\n    \"gender\": \"male\",\r\n    \"email\": \"wisdomochus1@gmail.com\",\r\n    \"status\": \"active\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://gorest.co.in/public/v2/users",
									"protocol": "https",
									"host": [
										"gorest",
										"co",
										"in"
									],
									"path": [
										"public",
										"v2",
										"users"
									]
								}
							},
							"status": "Created",
							"code": 201,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Date",
									"value": "Wed, 02 Oct 2024 08:30:06 GMT"
								},
								{
									"key": "Content-Type",
									"value": "application/json; charset=utf-8"
								},
								{
									"key": "Content-Length",
									"value": "105"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								},
								{
									"key": "Cache-Control",
									"value": "max-age=0, private, must-revalidate"
								},
								{
									"key": "etag",
									"value": "W/\"95e8934f96d0335a0b807f5b59f84dc5\""
								},
								{
									"key": "location",
									"value": "https://gorest.co.in/public/v2/users/7441656"
								},
								{
									"key": "referrer-policy",
									"value": "strict-origin-when-cross-origin"
								},
								{
									"key": "vary",
									"value": "Origin"
								},
								{
									"key": "x-content-type-options",
									"value": "nosniff"
								},
								{
									"key": "x-download-options",
									"value": "noopen"
								},
								{
									"key": "x-frame-options",
									"value": "SAMEORIGIN"
								},
								{
									"key": "x-permitted-cross-domain-policies",
									"value": "none"
								},
								{
									"key": "x-ratelimit-limit",
									"value": "90"
								},
								{
									"key": "x-ratelimit-remaining",
									"value": "89"
								},
								{
									"key": "x-ratelimit-reset",
									"value": "1"
								},
								{
									"key": "x-request-id",
									"value": "c391036a-ff10-4877-b141-a09d4287b54a"
								},
								{
									"key": "x-runtime",
									"value": "0.089555"
								},
								{
									"key": "x-xss-protection",
									"value": "0"
								},
								{
									"key": "CF-Cache-Status",
									"value": "DYNAMIC"
								},
								{
									"key": "Report-To",
									"value": "{\"endpoints\":[{\"url\":\"https:\\/\\/a.nel.cloudflare.com\\/report\\/v4?s=BC16qgqhTVN3usHTgICfV4ERDqj1dFS1SM4QZiq%2FMaGlTUlzYUcUSLG01NjmAnhtNJsBu9Su30nGo3NrvDB4Cdimv6kBCy3PmZ3YlHWq59WzjpHQ36b5TaPciNGtjlQ%3D\"}],\"group\":\"cf-nel\",\"max_age\":604800}"
								},
								{
									"key": "NEL",
									"value": "{\"success_fraction\":0,\"report_to\":\"cf-nel\",\"max_age\":604800}"
								},
								{
									"key": "Server",
									"value": "cloudflare"
								},
								{
									"key": "CF-RAY",
									"value": "8cc3541bd83a6f93-CDG"
								}
							],
							"cookie": [],
							"body": "{\n    \"id\": 7441656,\n    \"name\": \"Wisdom Erhabor\",\n    \"email\": \"wisdomochus1@gmail.com\",\n    \"gender\": \"male\",\n    \"status\": \"active\"\n}"
						}
					]
				},
				{
					"name": "Update user",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Update User - Verify response code is 200 OK\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"    pm.response.to.have.status(\"OK\");\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 5 seconds\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(5000);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify if the response body is received from server\", function () {\r",
									"    pm.response.to.have.body();\r",
									"});\r",
									"\r",
									"pm.test(\"Verify if the response header Content-Type=application/json\", function () {\r",
									"    pm.response.to.have.header(\"Content-Type\",\"application/json; charset=utf-8\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify if the response body contains fields such as id, name, email, gender, status\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"id\");\r",
									"    pm.expect(pm.response.text()).to.include(\"name\");\r",
									"    pm.expect(pm.response.text()).to.include(\"email\");\r",
									"    pm.expect(pm.response.text()).to.include(\"gender\");\r",
									"    pm.expect(pm.response.text()).to.include(\"status\");\r",
									"});\r",
									"\r",
									"pm.test(\"Successful POST request => Verify if gender is [male or female]\", function () {\r",
									"    pm.expect(pm.response.json().gender).to.be.oneOf([\"male\", \"female\"]);\r",
									"});\r",
									"\r",
									"pm.test(\"Successful POST request => Verify if status is [active, or inactive]\", function () {\r",
									"    pm.expect(pm.response.json().status).to.be.oneOf([\"active\", \"inactive\"]);\r",
									"});\r",
									"\r",
									"/*\r",
									"\r",
									"pm.test(\"JSON Value/key Check ==> Verify if name was updated to :Wisdom Erhabor\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.name).to.eql(\"Wisdom Erhabor\");\r",
									"});\r",
									"\r",
									"pm.test(\"JSON Value/key Check ==> Verify if email is  :wisdomochus1@gmail.com\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.email).to.eql(\"wisdomochus1@gmail.com\");\r",
									"});\r",
									"\r",
									"pm.test(\"JSON Value/key Check ==> Verify if name was updated to :Wisdom Erhabor and email is  :wisdomochus1@gmail.com\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.name).to.eql(\"Wisdom Erhabor\");\r",
									"    pm.expect(jsonData.email).to.eql(\"wisdomochus1@gmail.com\");\r",
									"});\r",
									"\r",
									"*/\r",
									"\r",
									"// CAPTURE THE RESPONSE ATTRIBUTES\r",
									"\r",
									"//pm.response.code\r",
									"\r",
									"console.log(\"Hello World!\");\r",
									"\r",
									"console.log(pm.response.code);\r",
									"\r",
									"console.log(\"The response code received from server is :\"+pm.response.code);\r",
									"console.log(\"The response message received from server is :\"+pm.response.status);\r",
									"console.log(\"The response time received from server is :\"+pm.response.responseTime+ \" milliseconds\");\r",
									"\r",
									"console.log(\"The response body size received from server is :\");\r",
									"console.log(pm.response.size());\r",
									"console.log(\"The response body (JSON) received from server is :\");\r",
									"console.log(pm.response.json());  // text() body\r",
									"console.log(\"The response body (text) received from server is :\");\r",
									"console.log(pm.response.text());\r",
									"\r",
									"console.log(\"The response headers received from server are :\"+pm.response.headers);\r",
									"\r",
									"// CAPTURE THE REQUEST ATTRIBUTEES\r",
									"\r",
									"console.log(\"The HTTP method used in this API is: \"+pm.request.method);\r",
									"console.log(\"The API URL used in this API is: \"+pm.request.url);\r",
									"console.log(\"The request headers used in this API are: \"+pm.request.headers);\r",
									"console.log(\"The request payload is: \");\r",
									"console.log(pm.request.body);\r",
									"console.log(\"The request size is: \");\r",
									"console.log(pm.request.size());\r",
									"console.log(\"The request name is : \"+pm.info.requestName);\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"//1.\r",
									"// Dynamically create the status options array\r",
									"let dynamicStatusOptionsArray = [\"Active\", \"Inactive\"]; // Example values\r",
									"\r",
									"// Set the collection variable\r",
									"pm.collectionVariables.set(\"statusOptions\", JSON.stringify(dynamicStatusOptionsArray));\r",
									"\r",
									"//2.\r",
									"// Retrieve the collection variable\r",
									"let statusArray = JSON.parse(pm.collectionVariables.get(\"statusOptions\"));\r",
									"\r",
									"// Select a random status\r",
									"let randomStatus = statusArray[Math.floor(Math.random() * statusArray.length)];\r",
									"\r",
									"// Set the selected status variable\r",
									"pm.collectionVariables.set(\"selectedStatus\", randomStatus);\r",
									"\r",
									"//Log the selected status to the console.\r",
									"console.log(\"Selected Status: \", randomStatus);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {
							"user-agent": true
						}
					},
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer 5582f007d8a190ac92d47850fc3ccb4dc14c96e0de5bf83db58270734a7952fe"
							},
							{
								"key": "User-Agent",
								"value": "{{$randomUserAgent}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\": \"{{$randomNamePrefix}} {{globalName}}\",\r\n    \"email\": \"{{globalEmail}}\",\r\n   \"status\": \"{{selectedStatus}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://gorest.co.in/public/v2/users/{{globalID}}",
							"protocol": "https",
							"host": [
								"gorest",
								"co",
								"in"
							],
							"path": [
								"public",
								"v2",
								"users",
								"{{globalID}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "List users API",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"List Users - Verify response code is 200 OK\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"    pm.response.to.have.status(\"OK\");\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 5 seconds\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(5000);\r",
									"});\r",
									"\r",
									"pm.test.skip(\"Verify the response body string received from server\", function () {\r",
									"    pm.response.to.have.body(\"response_body_string\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify if the response body is received from server\", function () {\r",
									"    pm.response.to.have.body();\r",
									"});\r",
									"\r",
									"pm.test(\"Verify if the response header Content-Type=application/json\", function () {\r",
									"    pm.response.to.have.header(\"Content-Type\",\"application/json; charset=utf-8\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify if the response body contains fields such as id, name, email, gender, status\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"id\");\r",
									"    pm.expect(pm.response.text()).to.include(\"name\");\r",
									"    pm.expect(pm.response.text()).to.include(\"email\");\r",
									"    pm.expect(pm.response.text()).to.include(\"gender\");\r",
									"    pm.expect(pm.response.text()).to.include(\"status\");\r",
									"});\r",
									"pm.test(\"Response body has valid Content-Type header\", function () {\r",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {
							"user-agent": true
						}
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "5582f007d8a190ac92d47850fc3ccb4dc14c96e0de5bf83db58270734a7952fe",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer ACCESS-TOKEN"
							},
							{
								"key": "User-Agent",
								"value": "{{$randomUserAgent}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "https://gorest.co.in/public/v2/users",
							"protocol": "https",
							"host": [
								"gorest",
								"co",
								"in"
							],
							"path": [
								"public",
								"v2",
								"users"
							]
						},
						"description": "### Get Users\n\nThis endpoint sends an HTTP GET request to retrieve a list of users from the server.\n\n**Request Body**  \nThis request does not require a request body.\n\n**Response**  \nThe response will include an array of user objects, where each object contains the following fields:\n\n- `id` (number): The unique identifier for the user.\n    \n- `name` (string): The name of the user.\n    \n- `email` (string): The email address of the user.\n    \n- `gender` (string): The gender of the user.\n    \n- `status` (string): The status of the user.\n    \n\nExample response:\n\n``` json\n[\n    {\n        \"id\": 0,\n        \"name\": \"\",\n        \"email\": \"\",\n        \"gender\": \"\",\n        \"status\": \"\"\n    }\n]\n\n ```"
					},
					"response": [
						{
							"name": "List users API",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer ACCESS-TOKEN"
									}
								],
								"url": {
									"raw": "https://gorest.co.in/public/v2/users",
									"protocol": "https",
									"host": [
										"gorest",
										"co",
										"in"
									],
									"path": [
										"public",
										"v2",
										"users"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Date",
									"value": "Wed, 02 Oct 2024 08:46:17 GMT"
								},
								{
									"key": "Content-Type",
									"value": "application/json; charset=utf-8"
								},
								{
									"key": "Transfer-Encoding",
									"value": "chunked"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								},
								{
									"key": "Cache-Control",
									"value": "max-age=0, private, must-revalidate"
								},
								{
									"key": "etag",
									"value": "W/\"04d4ce1780d4f5f061d94e088cb66ca5\""
								},
								{
									"key": "referrer-policy",
									"value": "strict-origin-when-cross-origin"
								},
								{
									"key": "vary",
									"value": "Origin"
								},
								{
									"key": "x-content-type-options",
									"value": "nosniff"
								},
								{
									"key": "x-download-options",
									"value": "noopen"
								},
								{
									"key": "x-frame-options",
									"value": "SAMEORIGIN"
								},
								{
									"key": "x-links-current",
									"value": "https://gorest.co.in/public/v2/users?page=1"
								},
								{
									"key": "x-links-next",
									"value": "https://gorest.co.in/public/v2/users?page=2"
								},
								{
									"key": "x-links-previous",
									"value": ""
								},
								{
									"key": "x-pagination-limit",
									"value": "10"
								},
								{
									"key": "x-pagination-page",
									"value": "1"
								},
								{
									"key": "x-pagination-pages",
									"value": "289"
								},
								{
									"key": "x-pagination-total",
									"value": "2887"
								},
								{
									"key": "x-permitted-cross-domain-policies",
									"value": "none"
								},
								{
									"key": "x-ratelimit-limit",
									"value": "90"
								},
								{
									"key": "x-ratelimit-remaining",
									"value": "89"
								},
								{
									"key": "x-ratelimit-reset",
									"value": "1"
								},
								{
									"key": "x-request-id",
									"value": "a5dfca49-563f-49a2-9e59-02a0326faea8"
								},
								{
									"key": "x-runtime",
									"value": "0.062732"
								},
								{
									"key": "x-xss-protection",
									"value": "0"
								},
								{
									"key": "CF-Cache-Status",
									"value": "DYNAMIC"
								},
								{
									"key": "Report-To",
									"value": "{\"endpoints\":[{\"url\":\"https:\\/\\/a.nel.cloudflare.com\\/report\\/v4?s=ECV%2F1Q6OgJ2HCf8KpmDWhc%2BadUB%2BjjlYiq9eVGvh833YrQc6YycSnYAV39%2BRX8UPSHVRQYhZkKo%2FpIcjyEFmDnVNRFCifJxRRiCxAtQztFJg8MnaXy7i0PifU2hXHtk%3D\"}],\"group\":\"cf-nel\",\"max_age\":604800}"
								},
								{
									"key": "NEL",
									"value": "{\"success_fraction\":0,\"report_to\":\"cf-nel\",\"max_age\":604800}"
								},
								{
									"key": "Server",
									"value": "cloudflare"
								},
								{
									"key": "CF-RAY",
									"value": "8cc36bcbbe88d3dc-CDG"
								},
								{
									"key": "Content-Encoding",
									"value": "br"
								}
							],
							"cookie": [],
							"body": "[\n    {\n        \"id\": 7441656,\n        \"name\": \"Wisdom O. Erhabor\",\n        \"email\": \"wisdomochus1@gmail.com\",\n        \"gender\": \"male\",\n        \"status\": \"active\"\n    },\n    {\n        \"id\": 7441372,\n        \"name\": \"Maheswar Nair\",\n        \"email\": \"maheswar_nair@morar.example\",\n        \"gender\": \"male\",\n        \"status\": \"inactive\"\n    },\n    {\n        \"id\": 7441370,\n        \"name\": \"Dhanalakshmi Kaul\",\n        \"email\": \"kaul_dhanalakshmi@casper-kemmer.example\",\n        \"gender\": \"female\",\n        \"status\": \"active\"\n    },\n    {\n        \"id\": 7441369,\n        \"name\": \"Udit Singh DDS\",\n        \"email\": \"udit_singh_dds@casper.test\",\n        \"gender\": \"female\",\n        \"status\": \"inactive\"\n    },\n    {\n        \"id\": 7441368,\n        \"name\": \"Rev. Atmanand Khanna\",\n        \"email\": \"khanna_rev_atmanand@smith.example\",\n        \"gender\": \"female\",\n        \"status\": \"active\"\n    },\n    {\n        \"id\": 7441367,\n        \"name\": \"Charak Adiga\",\n        \"email\": \"adiga_charak@erdman.example\",\n        \"gender\": \"male\",\n        \"status\": \"inactive\"\n    },\n    {\n        \"id\": 7441366,\n        \"name\": \"Somnath Rana\",\n        \"email\": \"somnath_rana@morar-kiehn.example\",\n        \"gender\": \"male\",\n        \"status\": \"active\"\n    },\n    {\n        \"id\": 7440593,\n        \"name\": \"Girja Dutta Esq.\",\n        \"email\": \"esq_girja_dutta@mueller.test\",\n        \"gender\": \"female\",\n        \"status\": \"active\"\n    },\n    {\n        \"id\": 7440592,\n        \"name\": \"Pres. Deeptimay Abbott\",\n        \"email\": \"abbott_pres_deeptimay@haley.test\",\n        \"gender\": \"female\",\n        \"status\": \"inactive\"\n    },\n    {\n        \"id\": 7440591,\n        \"name\": \"Chidambaram Dutta\",\n        \"email\": \"dutta_chidambaram@flatley-ebert.example\",\n        \"gender\": \"male\",\n        \"status\": \"inactive\"\n    }\n]"
						}
					]
				},
				{
					"name": "Delete user",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Delete User - Verify response code is 204 No Content\", function () {\r",
									"    pm.response.to.have.status(204);\r",
									"    pm.response.to.have.status(\"No Content\");\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 5 seconds\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(5000);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify if the response body is not received from server\", function () {\r",
									"    pm.response.to.not.have.body();\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {
							"user-agent": true
						}
					},
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer 5582f007d8a190ac92d47850fc3ccb4dc14c96e0de5bf83db58270734a7952fe"
							},
							{
								"key": "User-Agent",
								"value": "{{$randomUserAgent}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "https://gorest.co.in/public/v2/users/{{globalID}}",
							"protocol": "https",
							"host": [
								"gorest",
								"co",
								"in"
							],
							"path": [
								"public",
								"v2",
								"users",
								"{{globalID}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "List users API Copy",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"List Users - Verify response code is 200 OK\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"    pm.response.to.have.status(\"OK\");\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 5 seconds\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(5000);\r",
									"});\r",
									"\r",
									"pm.test.skip(\"Verify the response body string received from server\", function () {\r",
									"    pm.response.to.have.body(\"response_body_string\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify if the response body is received from server\", function () {\r",
									"    pm.response.to.have.body();\r",
									"});\r",
									"\r",
									"pm.test(\"Verify if the response header Content-Type=application/json\", function () {\r",
									"    pm.response.to.have.header(\"Content-Type\",\"application/json; charset=utf-8\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify if the response body contains fields such as id, name, email, gender, status\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"id\");\r",
									"    pm.expect(pm.response.text()).to.include(\"name\");\r",
									"    pm.expect(pm.response.text()).to.include(\"email\");\r",
									"    pm.expect(pm.response.text()).to.include(\"gender\");\r",
									"    pm.expect(pm.response.text()).to.include(\"status\");\r",
									"});\r",
									"pm.test(\"Response body has valid Content-Type header\", function () {\r",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {
							"user-agent": true
						}
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "5582f007d8a190ac92d47850fc3ccb4dc14c96e0de5bf83db58270734a7952fe",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer ACCESS-TOKEN"
							},
							{
								"key": "User-Agent",
								"value": "{{$randomUserAgent}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "https://gorest.co.in/public/v2/users",
							"protocol": "https",
							"host": [
								"gorest",
								"co",
								"in"
							],
							"path": [
								"public",
								"v2",
								"users"
							]
						},
						"description": "### Get Users\n\nThis endpoint sends an HTTP GET request to retrieve a list of users from the server.\n\n**Request Body**  \nThis request does not require a request body.\n\n**Response**  \nThe response will include an array of user objects, where each object contains the following fields:\n\n- `id` (number): The unique identifier for the user.\n    \n- `name` (string): The name of the user.\n    \n- `email` (string): The email address of the user.\n    \n- `gender` (string): The gender of the user.\n    \n- `status` (string): The status of the user.\n    \n\nExample response:\n\n``` json\n[\n    {\n        \"id\": 0,\n        \"name\": \"\",\n        \"email\": \"\",\n        \"gender\": \"\",\n        \"status\": \"\"\n    }\n]\n\n ```"
					},
					"response": [
						{
							"name": "List users API",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer ACCESS-TOKEN"
									}
								],
								"url": {
									"raw": "https://gorest.co.in/public/v2/users",
									"protocol": "https",
									"host": [
										"gorest",
										"co",
										"in"
									],
									"path": [
										"public",
										"v2",
										"users"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Date",
									"value": "Wed, 02 Oct 2024 08:46:17 GMT"
								},
								{
									"key": "Content-Type",
									"value": "application/json; charset=utf-8"
								},
								{
									"key": "Transfer-Encoding",
									"value": "chunked"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								},
								{
									"key": "Cache-Control",
									"value": "max-age=0, private, must-revalidate"
								},
								{
									"key": "etag",
									"value": "W/\"04d4ce1780d4f5f061d94e088cb66ca5\""
								},
								{
									"key": "referrer-policy",
									"value": "strict-origin-when-cross-origin"
								},
								{
									"key": "vary",
									"value": "Origin"
								},
								{
									"key": "x-content-type-options",
									"value": "nosniff"
								},
								{
									"key": "x-download-options",
									"value": "noopen"
								},
								{
									"key": "x-frame-options",
									"value": "SAMEORIGIN"
								},
								{
									"key": "x-links-current",
									"value": "https://gorest.co.in/public/v2/users?page=1"
								},
								{
									"key": "x-links-next",
									"value": "https://gorest.co.in/public/v2/users?page=2"
								},
								{
									"key": "x-links-previous",
									"value": ""
								},
								{
									"key": "x-pagination-limit",
									"value": "10"
								},
								{
									"key": "x-pagination-page",
									"value": "1"
								},
								{
									"key": "x-pagination-pages",
									"value": "289"
								},
								{
									"key": "x-pagination-total",
									"value": "2887"
								},
								{
									"key": "x-permitted-cross-domain-policies",
									"value": "none"
								},
								{
									"key": "x-ratelimit-limit",
									"value": "90"
								},
								{
									"key": "x-ratelimit-remaining",
									"value": "89"
								},
								{
									"key": "x-ratelimit-reset",
									"value": "1"
								},
								{
									"key": "x-request-id",
									"value": "a5dfca49-563f-49a2-9e59-02a0326faea8"
								},
								{
									"key": "x-runtime",
									"value": "0.062732"
								},
								{
									"key": "x-xss-protection",
									"value": "0"
								},
								{
									"key": "CF-Cache-Status",
									"value": "DYNAMIC"
								},
								{
									"key": "Report-To",
									"value": "{\"endpoints\":[{\"url\":\"https:\\/\\/a.nel.cloudflare.com\\/report\\/v4?s=ECV%2F1Q6OgJ2HCf8KpmDWhc%2BadUB%2BjjlYiq9eVGvh833YrQc6YycSnYAV39%2BRX8UPSHVRQYhZkKo%2FpIcjyEFmDnVNRFCifJxRRiCxAtQztFJg8MnaXy7i0PifU2hXHtk%3D\"}],\"group\":\"cf-nel\",\"max_age\":604800}"
								},
								{
									"key": "NEL",
									"value": "{\"success_fraction\":0,\"report_to\":\"cf-nel\",\"max_age\":604800}"
								},
								{
									"key": "Server",
									"value": "cloudflare"
								},
								{
									"key": "CF-RAY",
									"value": "8cc36bcbbe88d3dc-CDG"
								},
								{
									"key": "Content-Encoding",
									"value": "br"
								}
							],
							"cookie": [],
							"body": "[\n    {\n        \"id\": 7441656,\n        \"name\": \"Wisdom O. Erhabor\",\n        \"email\": \"wisdomochus1@gmail.com\",\n        \"gender\": \"male\",\n        \"status\": \"active\"\n    },\n    {\n        \"id\": 7441372,\n        \"name\": \"Maheswar Nair\",\n        \"email\": \"maheswar_nair@morar.example\",\n        \"gender\": \"male\",\n        \"status\": \"inactive\"\n    },\n    {\n        \"id\": 7441370,\n        \"name\": \"Dhanalakshmi Kaul\",\n        \"email\": \"kaul_dhanalakshmi@casper-kemmer.example\",\n        \"gender\": \"female\",\n        \"status\": \"active\"\n    },\n    {\n        \"id\": 7441369,\n        \"name\": \"Udit Singh DDS\",\n        \"email\": \"udit_singh_dds@casper.test\",\n        \"gender\": \"female\",\n        \"status\": \"inactive\"\n    },\n    {\n        \"id\": 7441368,\n        \"name\": \"Rev. Atmanand Khanna\",\n        \"email\": \"khanna_rev_atmanand@smith.example\",\n        \"gender\": \"female\",\n        \"status\": \"active\"\n    },\n    {\n        \"id\": 7441367,\n        \"name\": \"Charak Adiga\",\n        \"email\": \"adiga_charak@erdman.example\",\n        \"gender\": \"male\",\n        \"status\": \"inactive\"\n    },\n    {\n        \"id\": 7441366,\n        \"name\": \"Somnath Rana\",\n        \"email\": \"somnath_rana@morar-kiehn.example\",\n        \"gender\": \"male\",\n        \"status\": \"active\"\n    },\n    {\n        \"id\": 7440593,\n        \"name\": \"Girja Dutta Esq.\",\n        \"email\": \"esq_girja_dutta@mueller.test\",\n        \"gender\": \"female\",\n        \"status\": \"active\"\n    },\n    {\n        \"id\": 7440592,\n        \"name\": \"Pres. Deeptimay Abbott\",\n        \"email\": \"abbott_pres_deeptimay@haley.test\",\n        \"gender\": \"female\",\n        \"status\": \"inactive\"\n    },\n    {\n        \"id\": 7440591,\n        \"name\": \"Chidambaram Dutta\",\n        \"email\": \"dutta_chidambaram@flatley-ebert.example\",\n        \"gender\": \"male\",\n        \"status\": \"inactive\"\n    }\n]"
						}
					]
				}
			],
			"description": "Here, the response of an API becomes the request for another dependent API"
		},
		{
			"name": "PERFORMANCE/LOAD TESTING",
			"item": [
				{
					"name": "Create user",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Create User - Verify response code is 201 Created\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"    pm.response.to.have.status(\"Created\");\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 5 seconds\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(5000);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify if the response body is received from server\", function () {\r",
									"    pm.response.to.have.body();\r",
									"});\r",
									"\r",
									"pm.test(\"Verify if the response header Content-Type=application/json\", function () {\r",
									"    pm.response.to.have.header(\"Content-Type\",\"application/json; charset=utf-8\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify if the response body contains fields such as id, name, email, gender, status\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"id\");\r",
									"    pm.expect(pm.response.text()).to.include(\"name\");\r",
									"    pm.expect(pm.response.text()).to.include(\"email\");\r",
									"    pm.expect(pm.response.text()).to.include(\"gender\");\r",
									"    pm.expect(pm.response.text()).to.include(\"status\");\r",
									"});\r",
									"\r",
									"pm.test(\"Successful POST request => Verify if gender is [male or female]\", function () {\r",
									"    pm.expect(pm.response.json().gender).to.be.oneOf([\"male\", \"female\"]);\r",
									"});\r",
									"\r",
									"pm.test(\"Successful POST request => Verify if status is [active, or inactive]\", function () {\r",
									"    pm.expect(pm.response.json().status).to.be.oneOf([\"active\", \"inactive\"]);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {
							"user-agent": true
						}
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer 5582f007d8a190ac92d47850fc3ccb4dc14c96e0de5bf83db58270734a7952fe"
							},
							{
								"key": "User-Agent",
								"value": "{{$randomUserAgent}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\": \"{{$randomFullName}}\",\r\n    \"gender\": \"{{gender}}\",     // from csv file\r\n    \"email\": \"{{$randomEmail}}\",\r\n    \"status\": \"{{status}}\"      // from csv file\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://gorest.co.in/public/v2/users",
							"protocol": "https",
							"host": [
								"gorest",
								"co",
								"in"
							],
							"path": [
								"public",
								"v2",
								"users"
							]
						},
						"description": "### Add New User\n\nThis endpoint allows you to add a new user to the system.\n\n#### Request Body\n\n- `name` (string, required): The name of the user.\n    \n- `gender` (string, required): The gender of the user.\n    \n- `email` (string, required): The email address of the user.\n    \n- `status` (string, required): The status of the user.\n    \n\n#### Response\n\nUpon successful creation, the endpoint returns the details of the newly created user including:\n\n- `id` (integer): The unique identifier of the user.\n    \n- `name` (string): The name of the user.\n    \n- `email` (string): The email address of the user.\n    \n- `gender` (string): The gender of the user.\n    \n- `status` (string): The status of the user.\n    \n\nExample Response:\n\n``` json\n{\n    \"id\": 0,\n    \"name\": \"\",\n    \"email\": \"\",\n    \"gender\": \"\",\n    \"status\": \"\"\n}\n\n ```"
					},
					"response": [
						{
							"name": "Create user",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer 5582f007d8a190ac92d47850fc3ccb4dc14c96e0de5bf83db58270734a7952fe"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"name\": \"Wisdom Erhabor\",\r\n    \"gender\": \"male\",\r\n    \"email\": \"wisdomochus1@gmail.com\",\r\n    \"status\": \"active\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://gorest.co.in/public/v2/users",
									"protocol": "https",
									"host": [
										"gorest",
										"co",
										"in"
									],
									"path": [
										"public",
										"v2",
										"users"
									]
								}
							},
							"status": "Created",
							"code": 201,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Date",
									"value": "Wed, 02 Oct 2024 08:30:06 GMT"
								},
								{
									"key": "Content-Type",
									"value": "application/json; charset=utf-8"
								},
								{
									"key": "Content-Length",
									"value": "105"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								},
								{
									"key": "Cache-Control",
									"value": "max-age=0, private, must-revalidate"
								},
								{
									"key": "etag",
									"value": "W/\"95e8934f96d0335a0b807f5b59f84dc5\""
								},
								{
									"key": "location",
									"value": "https://gorest.co.in/public/v2/users/7441656"
								},
								{
									"key": "referrer-policy",
									"value": "strict-origin-when-cross-origin"
								},
								{
									"key": "vary",
									"value": "Origin"
								},
								{
									"key": "x-content-type-options",
									"value": "nosniff"
								},
								{
									"key": "x-download-options",
									"value": "noopen"
								},
								{
									"key": "x-frame-options",
									"value": "SAMEORIGIN"
								},
								{
									"key": "x-permitted-cross-domain-policies",
									"value": "none"
								},
								{
									"key": "x-ratelimit-limit",
									"value": "90"
								},
								{
									"key": "x-ratelimit-remaining",
									"value": "89"
								},
								{
									"key": "x-ratelimit-reset",
									"value": "1"
								},
								{
									"key": "x-request-id",
									"value": "c391036a-ff10-4877-b141-a09d4287b54a"
								},
								{
									"key": "x-runtime",
									"value": "0.089555"
								},
								{
									"key": "x-xss-protection",
									"value": "0"
								},
								{
									"key": "CF-Cache-Status",
									"value": "DYNAMIC"
								},
								{
									"key": "Report-To",
									"value": "{\"endpoints\":[{\"url\":\"https:\\/\\/a.nel.cloudflare.com\\/report\\/v4?s=BC16qgqhTVN3usHTgICfV4ERDqj1dFS1SM4QZiq%2FMaGlTUlzYUcUSLG01NjmAnhtNJsBu9Su30nGo3NrvDB4Cdimv6kBCy3PmZ3YlHWq59WzjpHQ36b5TaPciNGtjlQ%3D\"}],\"group\":\"cf-nel\",\"max_age\":604800}"
								},
								{
									"key": "NEL",
									"value": "{\"success_fraction\":0,\"report_to\":\"cf-nel\",\"max_age\":604800}"
								},
								{
									"key": "Server",
									"value": "cloudflare"
								},
								{
									"key": "CF-RAY",
									"value": "8cc3541bd83a6f93-CDG"
								}
							],
							"cookie": [],
							"body": "{\n    \"id\": 7441656,\n    \"name\": \"Wisdom Erhabor\",\n    \"email\": \"wisdomochus1@gmail.com\",\n    \"gender\": \"male\",\n    \"status\": \"active\"\n}"
						}
					]
				},
				{
					"name": "List users API",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"List Users - Verify response code is 200 OK\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"    pm.response.to.have.status(\"OK\");\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 5 seconds\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(5000);\r",
									"});\r",
									"\r",
									"pm.test.skip(\"Verify the response body string received from server\", function () {\r",
									"    pm.response.to.have.body(\"response_body_string\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify if the response body is received from server\", function () {\r",
									"    pm.response.to.have.body();\r",
									"});\r",
									"\r",
									"pm.test(\"Verify if the response header Content-Type=application/json\", function () {\r",
									"    pm.response.to.have.header(\"Content-Type\",\"application/json; charset=utf-8\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify if the response body contains fields such as id, name, email, gender, status\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"id\");\r",
									"    pm.expect(pm.response.text()).to.include(\"name\");\r",
									"    pm.expect(pm.response.text()).to.include(\"email\");\r",
									"    pm.expect(pm.response.text()).to.include(\"gender\");\r",
									"    pm.expect(pm.response.text()).to.include(\"status\");\r",
									"});\r",
									"pm.test(\"Response body has valid Content-Type header\", function () {\r",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {
							"user-agent": true
						}
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "5582f007d8a190ac92d47850fc3ccb4dc14c96e0de5bf83db58270734a7952fe",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer ACCESS-TOKEN"
							},
							{
								"key": "User-Agent",
								"value": "{{$randomUserAgent}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "https://gorest.co.in/public/v2/users",
							"protocol": "https",
							"host": [
								"gorest",
								"co",
								"in"
							],
							"path": [
								"public",
								"v2",
								"users"
							]
						},
						"description": "### Get Users\n\nThis endpoint sends an HTTP GET request to retrieve a list of users from the server.\n\n**Request Body**  \nThis request does not require a request body.\n\n**Response**  \nThe response will include an array of user objects, where each object contains the following fields:\n\n- `id` (number): The unique identifier for the user.\n    \n- `name` (string): The name of the user.\n    \n- `email` (string): The email address of the user.\n    \n- `gender` (string): The gender of the user.\n    \n- `status` (string): The status of the user.\n    \n\nExample response:\n\n``` json\n[\n    {\n        \"id\": 0,\n        \"name\": \"\",\n        \"email\": \"\",\n        \"gender\": \"\",\n        \"status\": \"\"\n    }\n]\n\n ```"
					},
					"response": [
						{
							"name": "List users API",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer ACCESS-TOKEN"
									}
								],
								"url": {
									"raw": "https://gorest.co.in/public/v2/users",
									"protocol": "https",
									"host": [
										"gorest",
										"co",
										"in"
									],
									"path": [
										"public",
										"v2",
										"users"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Date",
									"value": "Wed, 02 Oct 2024 08:46:17 GMT"
								},
								{
									"key": "Content-Type",
									"value": "application/json; charset=utf-8"
								},
								{
									"key": "Transfer-Encoding",
									"value": "chunked"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								},
								{
									"key": "Cache-Control",
									"value": "max-age=0, private, must-revalidate"
								},
								{
									"key": "etag",
									"value": "W/\"04d4ce1780d4f5f061d94e088cb66ca5\""
								},
								{
									"key": "referrer-policy",
									"value": "strict-origin-when-cross-origin"
								},
								{
									"key": "vary",
									"value": "Origin"
								},
								{
									"key": "x-content-type-options",
									"value": "nosniff"
								},
								{
									"key": "x-download-options",
									"value": "noopen"
								},
								{
									"key": "x-frame-options",
									"value": "SAMEORIGIN"
								},
								{
									"key": "x-links-current",
									"value": "https://gorest.co.in/public/v2/users?page=1"
								},
								{
									"key": "x-links-next",
									"value": "https://gorest.co.in/public/v2/users?page=2"
								},
								{
									"key": "x-links-previous",
									"value": ""
								},
								{
									"key": "x-pagination-limit",
									"value": "10"
								},
								{
									"key": "x-pagination-page",
									"value": "1"
								},
								{
									"key": "x-pagination-pages",
									"value": "289"
								},
								{
									"key": "x-pagination-total",
									"value": "2887"
								},
								{
									"key": "x-permitted-cross-domain-policies",
									"value": "none"
								},
								{
									"key": "x-ratelimit-limit",
									"value": "90"
								},
								{
									"key": "x-ratelimit-remaining",
									"value": "89"
								},
								{
									"key": "x-ratelimit-reset",
									"value": "1"
								},
								{
									"key": "x-request-id",
									"value": "a5dfca49-563f-49a2-9e59-02a0326faea8"
								},
								{
									"key": "x-runtime",
									"value": "0.062732"
								},
								{
									"key": "x-xss-protection",
									"value": "0"
								},
								{
									"key": "CF-Cache-Status",
									"value": "DYNAMIC"
								},
								{
									"key": "Report-To",
									"value": "{\"endpoints\":[{\"url\":\"https:\\/\\/a.nel.cloudflare.com\\/report\\/v4?s=ECV%2F1Q6OgJ2HCf8KpmDWhc%2BadUB%2BjjlYiq9eVGvh833YrQc6YycSnYAV39%2BRX8UPSHVRQYhZkKo%2FpIcjyEFmDnVNRFCifJxRRiCxAtQztFJg8MnaXy7i0PifU2hXHtk%3D\"}],\"group\":\"cf-nel\",\"max_age\":604800}"
								},
								{
									"key": "NEL",
									"value": "{\"success_fraction\":0,\"report_to\":\"cf-nel\",\"max_age\":604800}"
								},
								{
									"key": "Server",
									"value": "cloudflare"
								},
								{
									"key": "CF-RAY",
									"value": "8cc36bcbbe88d3dc-CDG"
								},
								{
									"key": "Content-Encoding",
									"value": "br"
								}
							],
							"cookie": [],
							"body": "[\n    {\n        \"id\": 7441656,\n        \"name\": \"Wisdom O. Erhabor\",\n        \"email\": \"wisdomochus1@gmail.com\",\n        \"gender\": \"male\",\n        \"status\": \"active\"\n    },\n    {\n        \"id\": 7441372,\n        \"name\": \"Maheswar Nair\",\n        \"email\": \"maheswar_nair@morar.example\",\n        \"gender\": \"male\",\n        \"status\": \"inactive\"\n    },\n    {\n        \"id\": 7441370,\n        \"name\": \"Dhanalakshmi Kaul\",\n        \"email\": \"kaul_dhanalakshmi@casper-kemmer.example\",\n        \"gender\": \"female\",\n        \"status\": \"active\"\n    },\n    {\n        \"id\": 7441369,\n        \"name\": \"Udit Singh DDS\",\n        \"email\": \"udit_singh_dds@casper.test\",\n        \"gender\": \"female\",\n        \"status\": \"inactive\"\n    },\n    {\n        \"id\": 7441368,\n        \"name\": \"Rev. Atmanand Khanna\",\n        \"email\": \"khanna_rev_atmanand@smith.example\",\n        \"gender\": \"female\",\n        \"status\": \"active\"\n    },\n    {\n        \"id\": 7441367,\n        \"name\": \"Charak Adiga\",\n        \"email\": \"adiga_charak@erdman.example\",\n        \"gender\": \"male\",\n        \"status\": \"inactive\"\n    },\n    {\n        \"id\": 7441366,\n        \"name\": \"Somnath Rana\",\n        \"email\": \"somnath_rana@morar-kiehn.example\",\n        \"gender\": \"male\",\n        \"status\": \"active\"\n    },\n    {\n        \"id\": 7440593,\n        \"name\": \"Girja Dutta Esq.\",\n        \"email\": \"esq_girja_dutta@mueller.test\",\n        \"gender\": \"female\",\n        \"status\": \"active\"\n    },\n    {\n        \"id\": 7440592,\n        \"name\": \"Pres. Deeptimay Abbott\",\n        \"email\": \"abbott_pres_deeptimay@haley.test\",\n        \"gender\": \"female\",\n        \"status\": \"inactive\"\n    },\n    {\n        \"id\": 7440591,\n        \"name\": \"Chidambaram Dutta\",\n        \"email\": \"dutta_chidambaram@flatley-ebert.example\",\n        \"gender\": \"male\",\n        \"status\": \"inactive\"\n    }\n]"
						}
					]
				}
			],
			"description": "Here, We test the APIs by hitting them contineously for \"x\" number of seconds and evaluate if the sever responds with 2xx response.\n\nLoad test has to be simulated with different test data and different User-Agent so that it looks realistic. Hence, all test data have to be unique."
		},
		{
			"name": "NEGATIVE TEST CASES",
			"item": [
				{
					"name": "Unsupported HTTP Methods Testing",
					"item": [
						{
							"name": "Create user",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Verify that the response code is a 4xx client side error\", function () {\r",
											"    pm.response.to.be.clientError;\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer 5582f007d8a190ac92d47850fc3ccb4dc14c96e0de5bf83db58270734a7952fe"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"name\": \"{{$randomFullName}}\",\r\n    \"gender\": \"male\",\r\n    \"email\": \"{{$randomEmail}}\",\r\n    \"status\": \"active\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://gorest.co.in/public/v2/users",
									"protocol": "https",
									"host": [
										"gorest",
										"co",
										"in"
									],
									"path": [
										"public",
										"v2",
										"users"
									]
								},
								"description": "### Add New User\n\nThis endpoint allows you to add a new user to the system.\n\n#### Request Body\n\n- `name` (string, required): The name of the user.\n    \n- `gender` (string, required): The gender of the user.\n    \n- `email` (string, required): The email address of the user.\n    \n- `status` (string, required): The status of the user.\n    \n\n#### Response\n\nUpon successful creation, the endpoint returns the details of the newly created user including:\n\n- `id` (integer): The unique identifier of the user.\n    \n- `name` (string): The name of the user.\n    \n- `email` (string): The email address of the user.\n    \n- `gender` (string): The gender of the user.\n    \n- `status` (string): The status of the user.\n    \n\nExample Response:\n\n``` json\n{\n    \"id\": 0,\n    \"name\": \"\",\n    \"email\": \"\",\n    \"gender\": \"\",\n    \"status\": \"\"\n}\n\n ```"
							},
							"response": []
						}
					],
					"description": "Test the give API with an invalid http method and the expected response code is 4XX client side error."
				},
				{
					"name": "Broken Endpoints Testing",
					"item": [
						{
							"name": "List users API",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Verify if the response code is 4xx client side or 5xx sever error\", function () {\r",
											"    pm.response.to.be.error; // general error\r",
											"});\r",
											"// v1 should throw error\r",
											"/*\r",
											"pm.response.to.be.serverError\r",
											"pm.response.to.be.clientError\r",
											"*/\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "5582f007d8a190ac92d47850fc3ccb4dc14c96e0de5bf83db58270734a7952fe",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer ACCESS-TOKEN"
									}
								],
								"url": {
									"raw": "https://gorest.co.in/public/v1/users",
									"protocol": "https",
									"host": [
										"gorest",
										"co",
										"in"
									],
									"path": [
										"public",
										"v1",
										"users"
									]
								},
								"description": "### Get Users\n\nThis endpoint sends an HTTP GET request to retrieve a list of users from the server.\n\n**Request Body**  \nThis request does not require a request body.\n\n**Response**  \nThe response will include an array of user objects, where each object contains the following fields:\n\n- `id` (number): The unique identifier for the user.\n    \n- `name` (string): The name of the user.\n    \n- `email` (string): The email address of the user.\n    \n- `gender` (string): The gender of the user.\n    \n- `status` (string): The status of the user.\n    \n\nExample response:\n\n``` json\n[\n    {\n        \"id\": 0,\n        \"name\": \"\",\n        \"email\": \"\",\n        \"gender\": \"\",\n        \"status\": \"\"\n    }\n]\n\n ```"
							},
							"response": []
						},
						{
							"name": "Create user",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Verify if the response code is 4xx client side or 5xx sever error\", function () {\r",
											"    pm.response.to.be.error; // general error\r",
											"});\r",
											"\r",
											"/*\r",
											"pm.response.to.be.serverError\r",
											"pm.response.to.be.clientError\r",
											"*/\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer 5582f007d8a190ac92d47850fc3ccb4dc14c96e0de5bf83db58270734a7952fe"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"name\": \"Wisdom Erhabor\",\r\n    \"gender\": \"male\",\r\n    \"email\": \"wisdomochus4@gmail.com\",\r\n    \"status\": \"active\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://gorest.co.in/p/v2/users",
									"protocol": "https",
									"host": [
										"gorest",
										"co",
										"in"
									],
									"path": [
										"p",
										"v2",
										"users"
									]
								},
								"description": "### Add New User\n\nThis endpoint allows you to add a new user to the system.\n\n#### Request Body\n\n- `name` (string, required): The name of the user.\n    \n- `gender` (string, required): The gender of the user.\n    \n- `email` (string, required): The email address of the user.\n    \n- `status` (string, required): The status of the user.\n    \n\n#### Response\n\nUpon successful creation, the endpoint returns the details of the newly created user including:\n\n- `id` (integer): The unique identifier of the user.\n    \n- `name` (string): The name of the user.\n    \n- `email` (string): The email address of the user.\n    \n- `gender` (string): The gender of the user.\n    \n- `status` (string): The status of the user.\n    \n\nExample Response:\n\n``` json\n{\n    \"id\": 0,\n    \"name\": \"\",\n    \"email\": \"\",\n    \"gender\": \"\",\n    \"status\": \"\"\n}\n\n ```"
							},
							"response": []
						},
						{
							"name": "Update user",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Verify if the response code is 4xx client side or 5xx sever error\", function () {\r",
											"    pm.response.to.be.error; // general error\r",
											"});\r",
											"\r",
											"/*\r",
											"pm.response.to.be.serverError\r",
											"pm.response.to.be.clientError\r",
											"*/"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer 5582f007d8a190ac92d47850fc3ccb4dc14c96e0de5bf83db58270734a7952fe"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"name\": \"Wisdom Erhabor\",\r\n    \"email\": \"wisdomochus1@gmail.com\",\r\n    \"status\": \"active\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://gorest.co.in/public/v2/us/7441656",
									"protocol": "https",
									"host": [
										"gorest",
										"co",
										"in"
									],
									"path": [
										"public",
										"v2",
										"us",
										"7441656"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete user",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Verify if the response code is 4xx client side or 5xx sever error\", function () {\r",
											"    pm.response.to.be.error; // general error\r",
											"});\r",
											"\r",
											"/*\r",
											"pm.response.to.be.serverError\r",
											"pm.response.to.be.clientError\r",
											"*/\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer 5582f007d8a190ac92d47850fc3ccb4dc14c96e0de5bf83db58270734a7952fe"
									}
								],
								"url": {
									"raw": "https://gorest.co.in//v2/users/7441782",
									"protocol": "https",
									"host": [
										"gorest",
										"co",
										"in"
									],
									"path": [
										"",
										"v2",
										"users",
										"7441782"
									]
								}
							},
							"response": []
						}
					],
					"description": "Broken Endpoints Testing"
				},
				{
					"name": "Payload Tampering Testing",
					"item": [
						{
							"name": "Create user - Invalid data type -  Invalid name",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Verify if the response code is 4xx client side or 5xx sever error\", function () {\r",
											"    pm.response.to.be.error; // general error\r",
											"});\r",
											"\r",
											"/*\r",
											"pm.response.to.be.serverError\r",
											"pm.response.to.be.clientError\r",
											"*/\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer 5582f007d8a190ac92d47850fc3ccb4dc14c96e0de5bf83db58270734a7952fe"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"name\": \"345643@#$$3\",\r\n    \"gender\": \"male\",\r\n    \"email\": \"{{$randomEmail}}\",\r\n    \"status\": \"active\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://gorest.co.in/public/v2/users",
									"protocol": "https",
									"host": [
										"gorest",
										"co",
										"in"
									],
									"path": [
										"public",
										"v2",
										"users"
									]
								},
								"description": "### Add New User\n\nThis endpoint allows you to add a new user to the system.\n\n#### Request Body\n\n- `name` (string, required): The name of the user.\n    \n- `gender` (string, required): The gender of the user.\n    \n- `email` (string, required): The email address of the user.\n    \n- `status` (string, required): The status of the user.\n    \n\n#### Response\n\nUpon successful creation, the endpoint returns the details of the newly created user including:\n\n- `id` (integer): The unique identifier of the user.\n    \n- `name` (string): The name of the user.\n    \n- `email` (string): The email address of the user.\n    \n- `gender` (string): The gender of the user.\n    \n- `status` (string): The status of the user.\n    \n\nExample Response:\n\n``` json\n{\n    \"id\": 0,\n    \"name\": \"\",\n    \"email\": \"\",\n    \"gender\": \"\",\n    \"status\": \"\"\n}\n\n ```"
							},
							"response": []
						},
						{
							"name": "Create user - Invalid data type - Invalid gender",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Verify if the response code is 4xx client side or 5xx sever error\", function () {\r",
											"    pm.response.to.be.error; // general error\r",
											"});\r",
											"\r",
											"/*\r",
											"pm.response.to.be.serverError\r",
											"pm.response.to.be.clientError\r",
											"*/\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer 5582f007d8a190ac92d47850fc3ccb4dc14c96e0de5bf83db58270734a7952fe"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"name\": \"{{$randomFullName}}\",\r\n    \"gender\": \"maleq\",\r\n    \"email\": \"{{$randomEmail}}\",\r\n    \"status\": \"active\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://gorest.co.in/public/v2/users",
									"protocol": "https",
									"host": [
										"gorest",
										"co",
										"in"
									],
									"path": [
										"public",
										"v2",
										"users"
									]
								},
								"description": "### Add New User\n\nThis endpoint allows you to add a new user to the system.\n\n#### Request Body\n\n- `name` (string, required): The name of the user.\n    \n- `gender` (string, required): The gender of the user.\n    \n- `email` (string, required): The email address of the user.\n    \n- `status` (string, required): The status of the user.\n    \n\n#### Response\n\nUpon successful creation, the endpoint returns the details of the newly created user including:\n\n- `id` (integer): The unique identifier of the user.\n    \n- `name` (string): The name of the user.\n    \n- `email` (string): The email address of the user.\n    \n- `gender` (string): The gender of the user.\n    \n- `status` (string): The status of the user.\n    \n\nExample Response:\n\n``` json\n{\n    \"id\": 0,\n    \"name\": \"\",\n    \"email\": \"\",\n    \"gender\": \"\",\n    \"status\": \"\"\n}\n\n ```"
							},
							"response": []
						},
						{
							"name": "Create user - Additional Payload Fields",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Verify if the response code is 4xx client side or 5xx sever error\", function () {\r",
											"    pm.response.to.be.error; // general error\r",
											"});\r",
											"\r",
											"/*\r",
											"pm.response.to.be.serverError\r",
											"pm.response.to.be.clientError\r",
											"*/\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer 5582f007d8a190ac92d47850fc3ccb4dc14c96e0de5bf83db58270734a7952fe"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"name\": \"{{$randomFullName}}\",\r\n    \"gender\": \"male\",\r\n    \"email\": \"{{$randomEmail}}\",\r\n    \"status\": \"active\",\r\n    \"mobile\": \"08169228069\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://gorest.co.in/public/v2/users",
									"protocol": "https",
									"host": [
										"gorest",
										"co",
										"in"
									],
									"path": [
										"public",
										"v2",
										"users"
									]
								},
								"description": "### Add New User\n\nThis endpoint allows you to add a new user to the system.\n\n#### Request Body\n\n- `name` (string, required): The name of the user.\n    \n- `gender` (string, required): The gender of the user.\n    \n- `email` (string, required): The email address of the user.\n    \n- `status` (string, required): The status of the user.\n    \n\n#### Response\n\nUpon successful creation, the endpoint returns the details of the newly created user including:\n\n- `id` (integer): The unique identifier of the user.\n    \n- `name` (string): The name of the user.\n    \n- `email` (string): The email address of the user.\n    \n- `gender` (string): The gender of the user.\n    \n- `status` (string): The status of the user.\n    \n\nExample Response:\n\n``` json\n{\n    \"id\": 0,\n    \"name\": \"\",\n    \"email\": \"\",\n    \"gender\": \"\",\n    \"status\": \"\"\n}\n\n ```"
							},
							"response": []
						},
						{
							"name": "Create user - Empty Payload Values",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Verify if the response code is 4xx client side or 5xx sever error\", function () {\r",
											"    pm.response.to.be.error; // general error\r",
											"});\r",
											"\r",
											"/*\r",
											"pm.response.to.be.serverError\r",
											"pm.response.to.be.clientError\r",
											"*/\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer 5582f007d8a190ac92d47850fc3ccb4dc14c96e0de5bf83db58270734a7952fe"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"name\": \"{{$randomFullName}}\",\r\n    \"gender\": \"male\",\r\n    \"email\": \"{{$randomEmail}}\",\r\n    \"status\": \"\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://gorest.co.in/public/v2/users",
									"protocol": "https",
									"host": [
										"gorest",
										"co",
										"in"
									],
									"path": [
										"public",
										"v2",
										"users"
									]
								},
								"description": "### Add New User\n\nThis endpoint allows you to add a new user to the system.\n\n#### Request Body\n\n- `name` (string, required): The name of the user.\n    \n- `gender` (string, required): The gender of the user.\n    \n- `email` (string, required): The email address of the user.\n    \n- `status` (string, required): The status of the user.\n    \n\n#### Response\n\nUpon successful creation, the endpoint returns the details of the newly created user including:\n\n- `id` (integer): The unique identifier of the user.\n    \n- `name` (string): The name of the user.\n    \n- `email` (string): The email address of the user.\n    \n- `gender` (string): The gender of the user.\n    \n- `status` (string): The status of the user.\n    \n\nExample Response:\n\n``` json\n{\n    \"id\": 0,\n    \"name\": \"\",\n    \"email\": \"\",\n    \"gender\": \"\",\n    \"status\": \"\"\n}\n\n ```"
							},
							"response": []
						},
						{
							"name": "Create user - Missing Payload Fields",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Verify if the response code is 4xx client side or 5xx sever error\", function () {\r",
											"    pm.response.to.be.error; // general error\r",
											"});\r",
											"\r",
											"/*\r",
											"pm.response.to.be.serverError\r",
											"pm.response.to.be.clientError\r",
											"*/\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer 5582f007d8a190ac92d47850fc3ccb4dc14c96e0de5bf83db58270734a7952fe"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n //   \"name\": \"{{$randomFullName}}\",\r\n    \"gender\": \"male\",\r\n    \"email\": \"{{$randomEmail}}\",  // Comment out the rest of the fields and test\r\n    \"status\": \"active\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://gorest.co.in/public/v2/users",
									"protocol": "https",
									"host": [
										"gorest",
										"co",
										"in"
									],
									"path": [
										"public",
										"v2",
										"users"
									]
								},
								"description": "### Add New User\n\nThis endpoint allows you to add a new user to the system.\n\n#### Request Body\n\n- `name` (string, required): The name of the user.\n    \n- `gender` (string, required): The gender of the user.\n    \n- `email` (string, required): The email address of the user.\n    \n- `status` (string, required): The status of the user.\n    \n\n#### Response\n\nUpon successful creation, the endpoint returns the details of the newly created user including:\n\n- `id` (integer): The unique identifier of the user.\n    \n- `name` (string): The name of the user.\n    \n- `email` (string): The email address of the user.\n    \n- `gender` (string): The gender of the user.\n    \n- `status` (string): The status of the user.\n    \n\nExample Response:\n\n``` json\n{\n    \"id\": 0,\n    \"name\": \"\",\n    \"email\": \"\",\n    \"gender\": \"\",\n    \"status\": \"\"\n}\n\n ```"
							},
							"response": []
						},
						{
							"name": "Create user - Invalid data length",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Verify if the response code is 4xx client side or 5xx sever error\", function () {\r",
											"    pm.response.to.be.error; // general error\r",
											"});\r",
											"\r",
											"/*\r",
											"pm.response.to.be.serverError\r",
											"pm.response.to.be.clientError\r",
											"*/\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer 5582f007d8a190ac92d47850fc3ccb4dc14c96e0de5bf83db58270734a7952fe"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"name\": \" Wisdom Erhabor Wisdom Erhabor Wisdom Erhabor Wisdom Erhabor Wisdom Erhabor Wisdom Erhabor Wisdom Erhabor Wisdom Erhabor Wisdom Erhabor Wisdom Erhabor Wisdom Erhabor Wisdom Erhabor Wisdom Erhabor Wisdom Erhabor Wisdom Erhabor\",\r\n    \"gender\": \"male\",\r\n    \"email\": \"{{$randomEmail}}\",\r\n    \"status\": \"active\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://gorest.co.in/public/v2/users",
									"protocol": "https",
									"host": [
										"gorest",
										"co",
										"in"
									],
									"path": [
										"public",
										"v2",
										"users"
									]
								},
								"description": "### Add New User\n\nThis endpoint allows you to add a new user to the system.\n\n#### Request Body\n\n- `name` (string, required): The name of the user.\n    \n- `gender` (string, required): The gender of the user.\n    \n- `email` (string, required): The email address of the user.\n    \n- `status` (string, required): The status of the user.\n    \n\n#### Response\n\nUpon successful creation, the endpoint returns the details of the newly created user including:\n\n- `id` (integer): The unique identifier of the user.\n    \n- `name` (string): The name of the user.\n    \n- `email` (string): The email address of the user.\n    \n- `gender` (string): The gender of the user.\n    \n- `status` (string): The status of the user.\n    \n\nExample Response:\n\n``` json\n{\n    \"id\": 0,\n    \"name\": \"\",\n    \"email\": \"\",\n    \"gender\": \"\",\n    \"status\": \"\"\n}\n\n ```"
							},
							"response": []
						},
						{
							"name": "Update user",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Verify if the response code is 4xx client side or 5xx sever error\", function () {\r",
											"    pm.response.to.be.error; // general error\r",
											"});\r",
											"\r",
											"/*\r",
											"pm.response.to.be.serverError\r",
											"pm.response.to.be.clientError\r",
											"*/\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer 5582f007d8a190ac92d47850fc3ccb4dc14c96e0de5bf83db58270734a7952fe"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"name\": \"Wisdom Erhabor\",\r\n    \"email\": \"wisdomochus1@gmail.com\",\r\n    \"status\": \"active\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://gorest.co.in/public/v2/users/7441656",
									"protocol": "https",
									"host": [
										"gorest",
										"co",
										"in"
									],
									"path": [
										"public",
										"v2",
										"users",
										"7441656"
									]
								}
							},
							"response": []
						}
					],
					"description": "Test the given API with an invalid payload and the expected response code is 4XX client side error.\n\ne.g\n\n- Invalid data type\n    \n- Invalid data length\n    \n- missing payload fields\n    \n- additional payload fields\n    \n- empty payload values"
				}
			],
			"description": "i. Unsupported HTTP methods Testing\n\nii. Broken Endpoints Testing\n\niii. Payload Tampering Testing"
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "cAccessToken",
			"value": "5582f007d8a190ac92d47850fc3ccb4dc14c96e0de5bf83db58270734a7952fe"
		},
		{
			"key": "statusOptions",
			"value": ""
		},
		{
			"key": "selectedStatus",
			"value": ""
		}
	]
}